# -*- coding: utf-8 -*-
#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED
# GENERATED BY: mujin_webstackclientpy_generategraphclient.py
# GENERATED AGAINST: mujinwebstack/2.9.1+
#

from .subscriptionclientraw import GraphSubscriptionBase

class GraphSubscriptionClient(GraphSubscriptionBase):

    def SubscribeBaseSystemOrchestratorState(self, subscriber, orchestratorId, interval=None, fields=None):
        parameterNameTypeValues = (
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeBaseSystemOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='BaseSystemOrchestratorState', fields=fields)

    def SubscribeCalibrationOrchestratorState(self, subscriber, orchestratorId, interval=None, fields=None):
        parameterNameTypeValues = (
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeCalibrationOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='CalibrationOrchestratorState', fields=fields)

    def SubscribeConfigurationChange(self, subscriber, fields=None):
        parameterNameTypeValues = (
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeConfigurationChange', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigurationChange', fields=fields)

    def SubscribeDiscoveredDevices(self, subscriber, interfaceName, deviceTypes=None, interval=None, fields=None):
        """Subscribe to the devices discovered on an interface.

        Args:
            subscriber (GraphSubscriber): Subscriber that listens to subscription status and messages.
            interfaceName (str): The network interface to scan.
            deviceTypes ([String], optional): The device types to be used. Leave empty for selecting all device types.
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms".
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            id (str): The id of the subscription, used for unsubscribe.

        Subscription Message:
            NetProbeState: 
        """
        parameterNameTypeValues = (
            ('interfaceName', 'String!', interfaceName),
            ('deviceTypes', '[String!]', deviceTypes),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeDiscoveredDevices', parameterNameTypeValues=parameterNameTypeValues, returnType='NetProbeState', fields=fields)

    def SubscribeEnvironmentChange(self, subscriber, units=None, fields=None):
        parameterNameTypeValues = (
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeEnvironmentChange', parameterNameTypeValues=parameterNameTypeValues, returnType='EnvironmentChange', fields=fields)

    def SubscribeOrchestratorMasterState(self, subscriber, interval=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeOrchestratorMasterState', parameterNameTypeValues=parameterNameTypeValues, returnType='OrchestratorMasterState', fields=fields)

    def SubscribeOrderCycleOrchestratorState(self, subscriber, orchestratorId, interval=None, fields=None):
        parameterNameTypeValues = (
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeOrderCycleOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='OrderCycleOrchestratorState', fields=fields)

    def SubscribePackingClusterOrchestratorState(self, subscriber, orchestratorId, interval=None, fields=None):
        parameterNameTypeValues = (
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribePackingClusterOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields)

    def SubscribePackingOrchestratorState(self, subscriber, orchestratorId, interval=None, fields=None):
        parameterNameTypeValues = (
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribePackingOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='SubscribePackingOrchestratorStateReturns', fields=fields)

    def SubscribePlanningServerState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribePlanningServerState', parameterNameTypeValues=parameterNameTypeValues, returnType='PlanningServerState', fields=fields)

    def SubscribeProductionCycleOrchestratorState(self, subscriber, orchestratorId, interval=None, fields=None):
        parameterNameTypeValues = (
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeProductionCycleOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='ProductionCycleOrchestratorState', fields=fields)

    def SubscribeProgramLogLines(self, subscriber, executionId, programId, interval=None, tail=None, fields=None):
        """Subscribe to program log lines.

        Args:
            subscriber (GraphSubscriber): Subscriber that listens to subscription status and messages.
            executionId (str): ID of the execution.
            programId (str): ID of the program.
            interval (str, optional): Polling interval, for example "2s" or "200ms".
                    If not specified, 500ms is used.
            tail (int, optional): Number of lines to retrieve from the end of the logs.
                    If not specified, only subscribe to new lines.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            id (str): The id of the subscription, used for unsubscribe.

        Subscription Message:
            [String]: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues = (
            ('executionId', 'String!', executionId),
            ('programId', 'String!', programId),
            ('interval', 'String', interval),
            ('tail', 'Int', tail),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeProgramLogLines', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields)

    def SubscribeRegistrationOrchestratorState(self, subscriber, orchestratorId, interval=None, fields=None):
        parameterNameTypeValues = (
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeRegistrationOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='RegistrationOrchestratorState', fields=fields)

    def SubscribeRobotBridgesEnvironment(self, subscriber, interval=None, units=None, fields=None):
        """Subscribe to the main environment in robotbridges. Upon subscription start, the currently tracked environment will be sent immediately.

        Args:
            subscriber (GraphSubscriber): Subscriber that listens to subscription status and messages.
            interval (str, optional): The minimum interval at which the environment changes will be returned, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            id (str): The id of the subscription, used for unsubscribe.

        Subscription Message:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeRobotBridgesEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields)

    def SubscribeRobotBridgesState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeRobotBridgesState', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotBridgesState', fields=fields)

    def SubscribeRobotMotorControlOrchestratorState(self, subscriber, orchestratorId, interval=None, fields=None):
        parameterNameTypeValues = (
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeRobotMotorControlOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotorControlOrchestratorState', fields=fields)

    def SubscribeSensorBridgesState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeSensorBridgesState', parameterNameTypeValues=parameterNameTypeValues, returnType='SensorBridgesState', fields=fields)

    def SubscribeTeachWorkerOrchestratorState(self, subscriber, orchestratorId, interval=None, fields=None):
        parameterNameTypeValues = (
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeTeachWorkerOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='TeachWorkerOrchestratorState', fields=fields)

    def SubscribeUntypedOrchestratorMasterState(self, subscriber, interval=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeUntypedOrchestratorMasterState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields)

    def SubscribeUntypedPlanningServerState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeUntypedPlanningServerState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields)

    def SubscribeUntypedRobotBridgesEnvironment(self, subscriber, interval=None, units=None, fields=None):
        """Subscribe to the main environment in robotbridges. Upon subscription start, the currently tracked environment will be sent immediately.

        Args:
            subscriber (GraphSubscriber): Subscriber that listens to subscription status and messages.
            interval (str, optional): The minimum interval at which the environment changes will be returned, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            id (str): The id of the subscription, used for unsubscribe.

        Subscription Message:
            Any: 
        """
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeUntypedRobotBridgesEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields)

    def SubscribeUntypedRobotBridgesState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeUntypedRobotBridgesState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields)

    def SubscribeUntypedSensorBridgesState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeUntypedSensorBridgesState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields)

    def SubscribeUntypedUserInterfaceState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeUntypedUserInterfaceState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields)

    def SubscribeUntypedVisionManagerMasterState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeUntypedVisionManagerMasterState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields)

    def SubscribeUserInterfaceState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeUserInterfaceState', parameterNameTypeValues=parameterNameTypeValues, returnType='UserInterfaceState', fields=fields)

    def SubscribeVisionManagerMasterState(self, subscriber, interval=None, units=None, fields=None):
        parameterNameTypeValues = (
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        )
        return self._SubscribeSimpleGraphAPI(subscriber, subscriptionName='SubscribeVisionManagerMasterState', parameterNameTypeValues=parameterNameTypeValues, returnType='VisionManagerMasterState', fields=fields)


#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED, SEE HEADER
#

