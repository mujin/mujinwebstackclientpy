# -*- coding: utf-8 -*-
#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED
# GENERATED BY: mujin_webstackclientpy_generategraphclient.py
# GENERATED AGAINST: mujinwebstack/2.35.0+48dc897df600041e027eaa31d49cf0f4c89598f9
#

import warnings
from typing import Any, Dict, List, Optional, Union, Callable, Tuple

from .webstackgraphclientutils import GraphClientBase
from .webstackgraphclientutils import UseLazyGraphQuery
from .controllerwebclientraw import Subscription


class GraphQueries:
    def CommandBaseSystemOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandBaseSystemOrchestratorQueries:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='CommandBaseSystemOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandBaseSystemOrchestratorQueries', fields=fields, timeout=timeout)

    def CommandCameraCalibrationOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandCameraCalibrationOrchestratorQueries:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='CommandCameraCalibrationOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandCameraCalibrationOrchestratorQueries', fields=fields, timeout=timeout)

    def CommandPackingOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandPackingOrchestratorQueries:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='CommandPackingOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandPackingOrchestratorQueries', fields=fields, timeout=timeout)

    def CommandRobotBridgesEx(
        self,
        queueId: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            queueId (str, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandRobotBridgesExQueries:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='CommandRobotBridgesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotBridgesExQueries', fields=fields, timeout=timeout)

    def CommandRobotBridgesV2(
        self,
        queueId: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            queueId (str, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandRobotBridgesV2Queries:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='CommandRobotBridgesV2', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotBridgesV2Queries', fields=fields, timeout=timeout)

    def ConfigureRobotBridgesEx(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConfigureRobotBridgesExQueries:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='ConfigureRobotBridgesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigureRobotBridgesExQueries', fields=fields, timeout=timeout)

    def ConfigureRobotBridgesV2(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConfigureRobotBridgesV2Queries:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='ConfigureRobotBridgesV2', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigureRobotBridgesV2Queries', fields=fields, timeout=timeout)

    def ExistApplicationConfiguration(
        self,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> bool:
        """Check existence for a specific application configuration.

        Args:
            relativeConfigurationId (str): ID of the configuration, for example "controllersystem.conf".
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            bool: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ExistApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def ExistApplicationConfigurations(
        self,
        relativeConfigurationIds: List[str],
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[bool]:
        """Check existence for multiple application configuration.

        Args:
            relativeConfigurationIds ([String]): List of configuration IDs.
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [Boolean]: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('relativeConfigurationIds', '[String!]!', relativeConfigurationIds),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ExistApplicationConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def ExistConfiguration(
        self,
        configurationId: str,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> bool:
        """Check existence for a specific configuration.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            bool: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ExistConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def ExistConfigurations(
        self,
        configurationIds: List[str],
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[bool]:
        """Check existence for multiple configuration.

        Args:
            configurationIds ([String]): List of configuration IDs.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [Boolean]: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationIds', '[String!]!', configurationIds),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ExistConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def ExistEnvironment(
        self,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> bool:
        """Check existence for a specific environment.

        Args:
            environmentId (str): ID of an environment for checking existence.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            bool: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ExistEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def ExistEnvironments(
        self,
        environmentIds: List[str],
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[bool]:
        """Check existence for multiple environments.

        Args:
            environmentIds ([String]): IDs of environments for checking existence.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [Boolean]: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentIds', '[String!]!', environmentIds),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ExistEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def GetAlarmDefinition(
        self,
        alarmStatus: Any,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get the alarm definition by the alarm status.

        Args:
            alarmStatus (AlarmStatus):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AlarmDefinition: An alarm definition entry in the alarm library alarms.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('alarmStatus', 'AlarmStatus!', alarmStatus),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetAlarmDefinition', parameterNameTypeValues=parameterNameTypeValues, returnType='AlarmDefinition', fields=fields, timeout=timeout)

    def GetAppearanceParameters(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get appearance parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AppearanceParameters: A set of parameters that vision detector uses.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='AppearanceParameters', fields=fields, timeout=timeout)

    def GetApplicationConfiguration(
        self,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular application configuration.

        Args:
            relativeConfigurationId (str): ID of the configuration, for example "controllersystem.conf".
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Configuration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Configuration', fields=fields, timeout=timeout)

    def GetAttachedSensor(
        self,
        attachedSensorId: str,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular attached sensor on a robot.

        Args:
            attachedSensorId (str): ID of the existing attached sensor.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def GetBody(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular body in an environment.

        Args:
            bodyId (str): ID of the existing body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def GetBodyParameters(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a body parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            BodyParameters: Parameters of an OpenRAVE 'Body'
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def GetConfiguration(
        self,
        configurationId: str,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular configuration.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Configuration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Configuration', fields=fields, timeout=timeout)

    def GetConfigurationRevision(
        self,
        configurationId: str,
        revisionId: int,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular revision of a configuration.

        Args:
            configurationId (str): ID of the configuration.
            revisionId (int): ID of the revision.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConfigurationRevision: revision of a configuration
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('revisionId', 'Int!', revisionId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetConfigurationRevision', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigurationRevision', fields=fields, timeout=timeout)

    def GetConnectedBody(
        self,
        bodyId: str,
        connectedBodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular connected body on a robot.

        Args:
            bodyId (str): ID of the body.
            connectedBodyId (str): ID of the existing connected body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def GetControllerSystemConfiguration(
        self,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get configurations for controller system.

        Args:
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ControllerSystemConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetControllerSystemConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='ControllerSystemConfiguration', fields=fields, timeout=timeout)

    def GetDetectorModuleByDetectorID(
        self,
        detectorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get detector module by detector id.

        Args:
            detectorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            DetectorModule: Detector module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('detectorId', 'String!', detectorId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetDetectorModuleByDetectorID', parameterNameTypeValues=parameterNameTypeValues, returnType='DetectorModule', fields=fields, timeout=timeout)

    def GetDeviceBridgeModuleByDeviceBridgeType(
        self,
        deviceBridgeType: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get device bridge module by device bridge type.

        Args:
            deviceBridgeType (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            DeviceBridgeModule: Device bridge module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('deviceBridgeType', 'String!', deviceBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetDeviceBridgeModuleByDeviceBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='DeviceBridgeModule', fields=fields, timeout=timeout)

    def GetElectronicDataSheet(
        self,
        electronicDataSheetId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a specific electronic data sheet.

        Args:
            electronicDataSheetId (str): ID of the electronic data sheet.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ElectronicDataSheet: An EDS (Electronic Data Sheet) used for network configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('electronicDataSheetId', 'String!', electronicDataSheetId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetElectronicDataSheet', parameterNameTypeValues=parameterNameTypeValues, returnType='ElectronicDataSheet', fields=fields, timeout=timeout)

    def GetEnvironment(
        self,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a specific environment.

        Args:
            environmentId (str): ID of an existing environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def GetEnvironmentRevision(
        self,
        environmentId: str,
        revisionId: int,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular revision of an environment.

        Args:
            environmentId (str): ID of the environment.
            revisionId (int): ID of the revision.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            EnvironmentRevision: Revision of an environment, contains backward and forward differences.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentId', 'String!', environmentId),
            ('revisionId', 'Int!', revisionId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetEnvironmentRevision', parameterNameTypeValues=parameterNameTypeValues, returnType='EnvironmentRevision', fields=fields, timeout=timeout)

    def GetEnvironments(
        self,
        environmentIds: List[str],
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """Get multiple environments.

        Args:
            environmentIds ([String]): ID of an existing environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [Environment]: An OpenRAVE Environment
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentIds', '[String!]!', environmentIds),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def GetEtherCATSubDeviceInformation(
        self,
        etherCatSubDeviceInformationId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a specific ethercat sub-device information.

        Args:
            etherCatSubDeviceInformationId (str): ID of the ethercat sub-device information.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            EtherCATSubDeviceInformation: An ESI (EtherCAT SubDevice Information) used for network configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('etherCatSubDeviceInformationId', 'String!', etherCatSubDeviceInformationId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetEtherCATSubDeviceInformation', parameterNameTypeValues=parameterNameTypeValues, returnType='EtherCATSubDeviceInformation', fields=fields, timeout=timeout)

    def GetExecutorByExecutorType(
        self,
        executorType: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get executor module by executor id.

        Args:
            executorType (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ExecutorModule: Executor module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('executorType', 'String!', executorType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetExecutorByExecutorType', parameterNameTypeValues=parameterNameTypeValues, returnType='ExecutorModule', fields=fields, timeout=timeout)

    def GetFeedbackHistory(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get feedback history in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            FeedbackHistory: The history of feedback from robotic system such as measured mass, final status of pick (success/piecelost etc.), options that were used for chucking etc.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetFeedbackHistory', parameterNameTypeValues=parameterNameTypeValues, returnType='FeedbackHistory', fields=fields, timeout=timeout)

    def GetGeometry(
        self,
        bodyId: str,
        environmentId: str,
        geometryId: str,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular geometry in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometryId (str): ID of the existing geometry.
            linkId (str): ID of the link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def GetGrabbed(
        self,
        bodyId: str,
        environmentId: str,
        grabbedId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular grabbed object in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbedId (str): ID of the existing grabbed object.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbedId', 'String!', grabbedId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def GetGraspSet(
        self,
        bodyId: str,
        environmentId: str,
        graspSetId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular grasp set in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSetId (str): ID of the existing grasp set.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSetId', 'String!', graspSetId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def GetGripperBridgeModuleByGripperBridgeType(
        self,
        gripperBridgeType: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get gripper bridge module by gripper bridge type.

        Args:
            gripperBridgeType (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperBridgeModule: Gripper bridge module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('gripperBridgeType', 'String!', gripperBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGripperBridgeModuleByGripperBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperBridgeModule', fields=fields, timeout=timeout)

    def GetGripperInfo(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfoId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular gripper info on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoId (str): ID of the existing gripper info.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def GetGripperInfoAirChannel(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfoAirChannelId: str,
        gripperInfoId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular air channel of the gripper infos.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoAirChannelId (str): ID of the existing air channel.
            gripperInfoId (str): ID of the gripper info
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfoAirChannel: The information about each air channel.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoAirChannelId', 'String!', gripperInfoAirChannelId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGripperInfoAirChannel', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfoAirChannel', fields=fields, timeout=timeout)

    def GetHypervisorCapabilities(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[str]:
        """Get capabilities supported by hypervisor.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [String]: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='GetHypervisorCapabilities', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def GetHypervisorStatus(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get status of hypervisor.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            HypervisorStatus: Hypervisor status
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='GetHypervisorStatus', parameterNameTypeValues=parameterNameTypeValues, returnType='HypervisorStatus', fields=fields, timeout=timeout)

    def GetHypervisorVersion(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> str:
        """Get version of hypervisor.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            str: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='GetHypervisorVersion', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def GetIKParameterization(
        self,
        bodyId: str,
        environmentId: str,
        ikParamId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular ikparam in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParamId (str): ID of the existing ikparam.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameterization describes a pose in space. Includes additional parameters that can affect grasping (e.g. Direction, Angle).
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParamId', 'String!', ikParamId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def GetInputOutputDeviceDescription(
        self,
        inputOutputDeviceDescriptionId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a specific input/output device description.

        Args:
            inputOutputDeviceDescriptionId (str): ID of the input/output device description.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            InputOutputDeviceDescription: An IODD (Input/Output Device Description) used for network configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('inputOutputDeviceDescriptionId', 'String!', inputOutputDeviceDescriptionId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetInputOutputDeviceDescription', parameterNameTypeValues=parameterNameTypeValues, returnType='InputOutputDeviceDescription', fields=fields, timeout=timeout)

    def GetJoint(
        self,
        bodyId: str,
        environmentId: str,
        jointId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            jointId (str): ID of the existing joint.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('jointId', 'String!', jointId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def GetLink(
        self,
        bodyId: str,
        environmentId: str,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular link in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            linkId (str): ID of the existing link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def GetLogEntry(
        self,
        logEntryId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular log entry.

        Args:
            logEntryId (str): ID of the log entry.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            LogEntry: An entry in the logs. The current parent-children level relationship among log entry types:
                    
                    ```
                    LogEntry
                    ├─ GenericLogEntry
                    ├─ UserLogEntry
                    ├─ DeviceLogEntry
                    ├─ DeviceSnapshotLogEntry
                    ├─ ProductionCycleLogEntry
                    │  ├─ OrderCycleReadyLogEntry
                    │  ├─ ProductionCycleProcessingLogEntry
                    │  ├─ ProductionCyclePausedLogEntry
                    │  ├─ ProductionCycleResumedLogEntry
                    │  ├─ ProductionCycleFinishedLogEntry
                    │  └─ ProductionOrderRequestLogEntry
                    │     ├─ ProductionOrderResultLogEntry
                    │     ├─ OrderCycleLogEntry
                    │     │  ├─ OrderCyclePreparedLogEntry
                    │     │  ├─ OrderCycleResumedLogEntry
                    │     │  ├─ OrderCycleFinishedLogEntry
                    │     │  │  └─ OrderCycleFinishAnnotationLogEntry
                    │     │  ├─ OrderCyclePlanningLogEntry
                    │     │  ├─ PlanningCycleLogEntry
                    │     │  │  └─ PlanningDiagnosisLogEntry
                    │     │  ├─ OrderCycleExecutionLogEntry
                    │     │  ├─ ExecutionCycleLogEntry
                    │     │  ├─ ProcessedTargetLogEntry
                    │     │  ├─ PlacedTargetLogEntry
                    │     │  ├─ VisionContainerDetectionLogEntry
                    │     │  │  ├─ VisionContainerDetectionFinishedLogEntry
                    │     │  │  └─ SnapLogEntry
                    │     │  ├─ VisionObjectDetectionLogEntry
                    │     │  │  ├─ VisionObjectDetectionFinishedLogEntry
                    │     │  │  └─ SnapLogEntry
                    │     │  ├─ VisionExecutionVerificationLogEntry
                    │     │  │  ├─ VisionExecutionVerificationFinishedLogEntry
                    │     │  │  └─ SnapLogEntry
                    │     │  ├─ TrajectoryLogEntry
                    │     │  └─ ProductionOperationLogEntry
                    │     ├─ PackFormationOrderCycleLogEntry
                    │     │  ├─ PackFormationOrderCycleFinishedLogEntry
                    │     │  └─ ProductionOperationLogEntry
                    │     ├─ PalletWrapperOrderCycleLogEntry
                    │     │  ├─ PalletWrapperOrderCycleFinishedLogEntry
                    │     │  └─ ProductionOperationLogEntry
                    │     ├─ PalletStackerOrderCycleLogEntry
                    │     │  ├─ PalletStackerOrderCycleFinishedLogEntry
                    │     │  └─ ProductionOperationLogEntry
                    │     ├─ PalletSandwicherOrderCycleLogEntry
                    │     │  ├─ PalletSandwicherOrderCycleFinishedLogEntry
                    │     │  └─ ProductionOperationLogEntry
                    │     ├─ LabelerOrderCycleLogEntry
                    │     │  ├─ LabelerOrderCycleFinishedLogEntry
                    │     │  └─ ProductionOperationLogEntry
                    │     ├─ TrashingOrderCycleLogEntry
                    │     │  ├─ TrashingOrderCycleFinishedLogEntry
                    │     │  └─ ProductionOperationLogEntry
                    │     ├─ ManualInspectionOrderCycleLogEntry
                    │     │  ├─ ManualInspectionOrderCycleFinishedLogEntry
                    │     │  └─ ProductionOperationLogEntry
                    │     ├─ VisionInspectionOrderCycleLogEntry
                    │     │  ├─ VisionInspectionOrderCycleFinishedLogEntry
                    │     │  ├─ VisionContainerDetectionLogEntry
                    │     │  │  ├─ VisionContainerDetectionFinishedLogEntry
                    │     │  │  └─ SnapLogEntry
                    │     │  ├─ VisionObjectDetectionLogEntry
                    │     │  │  ├─ VisionObjectDetectionFinishedLogEntry
                    │     │  │  └─ SnapLogEntry
                    │     │  ├─ VisionExecutionVerificationLogEntry
                    │     │  │  ├─ VisionExecutionVerificationFinishedLogEntry
                    │     │  │  └─ SnapLogEntry
                    │     │  └─ ProductionOperationLogEntry
                    │     └─ ITLOrderCycleLogEntry
                    │        ├─ ITLOrderCycleFinishedLogEntry
                    │        └─ ProductionOperationLogEntry
                    ├─ ManualDetectionLogEntry
                    │  ├─ VisionContainerDetectionLogEntry
                    │  └─ VisionObjectDetectionLogEntry
                    ├─ CalibrationVisionSessionLogEntry
                    │  ├─ CalibrationSessionFinishedLogEntry
                    │  ├─ CalibrationStageExecutionLogEntry
                    │  │  └─ CalibrationStageExecutionFinishedLogEntry
                    │  ├─ CalibrationVisionPoseGenerationResultLogEntry
                    │  ├─ CalibrationVisionObservationSetLogEntry
                    │  │  ├─ CalibrationVisionSensorCaptureRecordLogEntry
                    │  │  ├─ CalibrationVisionObservationLogEntry
                    │  │  └─ CalibrationVisionBoardDotMaskLogEntry
                    │  ├─ CalibrationVisionResultIntrinsicsLogEntry
                    │  ├─ CalibrationVisionModelParametersIntrinsicsLogEntry
                    │  ├─ CalibrationVisionResultRelativeLogEntry
                    │  ├─ CalibrationVisionResultHandEyeLogEntry
                    │  ├─ CalibrationVisionModelParametersHandEyeLogEntry
                    │  ├─ CalibrationVisionModelParametersRelativeLogEntry
                    │  └─ CalibrationVisionSingleShotModelParametersLogEntry
                    ├─ AccountUserChangeLogEntry
                    ├─ AccountGroupChangeLogEntry
                    ├─ AccountRoleChangeLogEntry
                    ├─ AccountUserGroupRelationChangeLogEntry
                    ├─ AccountGroupRoleRelationChangeLogEntry
                    ├─ AccountRolePermissionRelationChangeLogEntry
                    ├─ AccountAccessLogEntry
                    ├─ ManualOperationLogEntry
                    │  └─ ManualOperationFinishedLogEntry
                    ├─ AlarmLogEntry
                    │  └─ AlarmResolvedLogEntry
                    ├─ ReceiveMessageLogEntry
                    │  └─ ReceiveMessageFinishedLogEntry
                    ├─ SendMessageLogEntry
                    │  ├─ SendMessageAttemptLogEntry
                    │  └─ SendMessageFinishedLogEntry
                    ├─ WarehouseExecutionOrderLogEntry
                    │  ├─ WarehouseExecutionOrderChangeLogEntry
                    │  ├─ WarehouseExecutionOrderUpdateLogEntry
                    │  ├─ WarehouseExecutionOrderPackComputationLogEntry
                    │  │  └─ WarehouseExecutionOrderPackComputationFinishedLogEntry
                    │  ├─ WarehouseExecutionOrderContainerLogEntry
                    │  │  ├─ WarehouseExecutionOrderContainerUpdateLogEntry
                    │  │  └─ WarehouseExecutionOrderContainerFinishedLogEntry
                    │  └─ WarehouseExecutionOrderFinishedLogEntry
                    ├─ WarehouseExecutionReplenishLogEntry
                    │  ├─ WarehouseExecutionReplenishChangeLogEntry
                    │  └─ WarehouseExecutionReplenishFinishedLogEntry
                    ├─ WarehouseExecutionEjectLogEntry
                    │  ├─ WarehouseExecutionEjectChangeLogEntry
                    │  └─ WarehouseExecutionEjectFinishedLogEntry
                    ├─ WarehouseExecutionDischargeLogEntry
                    │  ├─ WarehouseExecutionDischargeChangeLogEntry
                    │  └─ WarehouseExecutionDischargeFinishedLogEntry
                    ├─ WarehouseExecutionInductLogEntry
                    │  ├─ WarehouseExecutionInductChangeLogEntry
                    │  └─ WarehouseExecutionInductFinishedLogEntry
                    ├─ WarehouseExecutionSummonLogEntry
                    │  ├─ WarehouseExecutionSummonChangeLogEntry
                    │  └─ WarehouseExecutionSummonFinishedLogEntry
                    ├─ WarehouseExecutionContainerLogEntry
                    │  ├─ WarehouseExecutionContainerChangeLogEntry
                    │  └─ WarehouseExecutionContainerRemovedLogEntry
                    ├─ WarehouseExecutionTaskLogEntry
                    │  └─ WarehouseExecutionTaskFinishedLogEntry
                    ├─ MobileRobotTaskLogEntry
                    │  └─ MobileRobotTaskFinishedLogEntry
                    ├─ LabelerLogEntry
                    ├─ PalletWrapperLogEntry
                    ├─ PalletSandwicherLogEntry
                    ├─ PalletStackerLogEntry
                    ├─ MobileRobotControlSystemLogEntry
                    └─ GraspSetLogEntry
                    ```
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logEntryId', 'String!', logEntryId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetLogEntry', parameterNameTypeValues=parameterNameTypeValues, returnType='LogEntry', fields=fields, timeout=timeout)

    def GetMesh(
        self,
        meshId: str,
        meshUnit: Optional[str] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular mesh.

        Args:
            meshId (str): ID of the mesh.
            meshUnit (str, optional): Original unit of the mesh. Defaults to meter.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Mesh: Trangle mesh.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('meshId', 'String!', meshId),
            ('meshUnit', 'String', meshUnit),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetMesh', parameterNameTypeValues=parameterNameTypeValues, returnType='Mesh', fields=fields, timeout=timeout)

    def GetModelProcessorProperties(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorProperties: A set of values related to the latest model processing state
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorProperties', fields=fields, timeout=timeout)

    def GetModelProcessorState(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get model processor state in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetModelProcessorState', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorState', fields=fields, timeout=timeout)

    def GetModelProcessorTaskState(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get task state of model processor.

        Deprecated:
            Use `GetWebStackState` instead.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorTaskState: Current status of the model processor.
        """
        warnings.warn('"GetModelProcessorTaskState" is deprecated. Use `GetWebStackState` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='GetModelProcessorTaskState', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorTaskState', fields=fields, timeout=timeout)

    def GetOrchestratorMasterConfiguration(
        self,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get configurations for orchestrator master.

        Args:
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            OrchestratorMasterConfiguration: Orchestrator master configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetOrchestratorMasterConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='OrchestratorMasterConfiguration', fields=fields, timeout=timeout)

    def GetOrchestratorModuleByOrchestratorType(
        self,
        orchestratorType: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get orchestrator module by orchestrator type.

        Args:
            orchestratorType (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            OrchestratorModule: Orchestrator module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorType', 'String!', orchestratorType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetOrchestratorModuleByOrchestratorType', parameterNameTypeValues=parameterNameTypeValues, returnType='OrchestratorModule', fields=fields, timeout=timeout)

    def GetPendantHeartbeatEndpoint(
        self,
        address: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> str:
        """Get pendant heartbeat endpoint.

        Args:
            address (str, optional): Pendant address.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            str: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('address', 'String', address),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetPendantHeartbeatEndpoint', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def GetPendantModuleByPendantType(
        self,
        pendantType: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get pendant module by device type.

        Args:
            pendantType (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PendantModule: Pendant module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('pendantType', 'String!', pendantType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetPendantModuleByPendantType', parameterNameTypeValues=parameterNameTypeValues, returnType='PendantModule', fields=fields, timeout=timeout)

    def GetPendantState(
        self,
        address: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get state of pendant.

        Args:
            address (str, optional): Pendant address.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PendantState: Pendant state
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('address', 'String', address),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetPendantState', parameterNameTypeValues=parameterNameTypeValues, returnType='PendantState', fields=fields, timeout=timeout)

    def GetPendantVersion(
        self,
        address: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> str:
        """Get version of pendant.

        Args:
            address (str, optional): Pendant address.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            str: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('address', 'String', address),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetPendantVersion', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def GetPositionConfiguration(
        self,
        bodyId: str,
        environmentId: str,
        positionConfigurationId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular position configuration in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfigurationId (str): ID of the existing position configuration.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def GetProfileSelectionOrder(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[str]:
        """Get profile selection order.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [String]: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='GetProfileSelectionOrder', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def GetProgram(
        self,
        programId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a specific program.

        Args:
            programId (str): ID of the program.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Program: ITL program.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('programId', 'String!', programId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Program', fields=fields, timeout=timeout)

    def GetProgramFilesAtReference(
        self,
        programId: str,
        referenceId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """Get all program files at a particular reference.

        Args:
            programId (str): ID of the program.
            referenceId (str): ID of the program reference.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [ProgramFile]:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('programId', 'String!', programId),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProgramFilesAtReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramFile', fields=fields, timeout=timeout)

    def GetProgramObject(
        self,
        objectId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get single program object.

        Args:
            objectId (str): ID of the program object to retrieve.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramObject: A blob, tree or commit object. Can be shared by multiple programs
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('objectId', 'String!', objectId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProgramObject', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramObject', fields=fields, timeout=timeout)

    def GetProgramReference(
        self,
        programId: str,
        referenceId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a specific program reference.

        Args:
            programId (str): ID of the program.
            referenceId (str): ID of the reference, "refs/heads/my-branch" for example.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramReference: A named reference pointing to a commit object.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('programId', 'String!', programId),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramReference', fields=fields, timeout=timeout)

    def GetProviderBridgeModuleByProviderBridgeType(
        self,
        providerBridgeType: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get provider bridge module by provider bridge type.

        Args:
            providerBridgeType (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProviderBridgeModule: Provider bridge module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('providerBridgeType', 'String!', providerBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProviderBridgeModuleByProviderBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='ProviderBridgeModule', fields=fields, timeout=timeout)

    def GetRobotBridgeModuleByRobotBridgeType(
        self,
        robotBridgeType: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get robot bridge module by robot bridge type.

        Args:
            robotBridgeType (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotBridgeModule: Robot bridge module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('robotBridgeType', 'String!', robotBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRobotBridgeModuleByRobotBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotBridgeModule', fields=fields, timeout=timeout)

    def GetRobotBridgesConfiguration(
        self,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get configurations for robotbridges.

        Args:
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotBridgesConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRobotBridgesConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotBridgesConfiguration', fields=fields, timeout=timeout)

    def GetRobotMotionParameters(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a robot motion parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def GetScheduleEvent(
        self,
        scheduleEventId: str,
        instancesEndedAt: Optional[Any] = None,
        instancesStartedAt: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a schedule event.

        Args:
            scheduleEventId (str): ID of the schedule event.
            instancesEndedAt (DateTime, optional): The time until which schedule instances are requested.
            instancesStartedAt (DateTime, optional): The time from which schedule instances are requested.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ScheduleEvent:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('scheduleEventId', 'String!', scheduleEventId),
            ('instancesEndedAt', 'DateTime', instancesEndedAt),
            ('instancesStartedAt', 'DateTime', instancesStartedAt),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetScheduleEvent', parameterNameTypeValues=parameterNameTypeValues, returnType='ScheduleEvent', fields=fields, timeout=timeout)

    def GetSensorBridgeModuleBySensorBridgeType(
        self,
        sensorBridgeType: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get sensor bridge module by sensor bridge type.

        Args:
            sensorBridgeType (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SensorBridgeModule: Sensor bridge module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('sensorBridgeType', 'String!', sensorBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetSensorBridgeModuleBySensorBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='SensorBridgeModule', fields=fields, timeout=timeout)

    def GetSensorBridgesConfiguration(
        self,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get configurations for sensorbridges.

        Args:
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SensorBridgesConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetSensorBridgesConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SensorBridgesConfiguration', fields=fields, timeout=timeout)

    def GetSignalMapConfiguration(
        self,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get signal map.

        Args:
            relativeConfigurationId (str): ID of the signal map, for example "signalmaps/custom.signalmap".
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SignalMapConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetSignalMapConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SignalMapConfiguration', fields=fields, timeout=timeout)

    def GetSystemConfiguration(
        self,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get the system configuration.

        Args:
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SystemConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetSystemConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SystemConfiguration', fields=fields, timeout=timeout)

    def GetTool(
        self,
        bodyId: str,
        environmentId: str,
        toolId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a particular tool on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            toolId (str): ID of the existing tool.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('toolId', 'String!', toolId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def GetUntypedAppearanceParameters(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get untyped appearance parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedApplicationConfiguration(
        self,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        ifModifiedSinceModifiedAt: Optional[Any] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get a particular application configuration without typing.

        Args:
            relativeConfigurationId (str): ID of the configuration, for example "controllersystem.conf".
            applicationId (str, optional): ID of the application.
            ifModifiedSinceModifiedAt (DateTime, optional): If supplied, will return null unless modified after this timestamp.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('ifModifiedSinceModifiedAt', 'DateTime', ifModifiedSinceModifiedAt),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedConfiguration(
        self,
        configurationId: str,
        ifModifiedSinceModifiedAt: Optional[Any] = None,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get a particular configuration without typing.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            ifModifiedSinceModifiedAt (DateTime, optional): If supplied, will return null unless modified after this timestamp.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('ifModifiedSinceModifiedAt', 'DateTime', ifModifiedSinceModifiedAt),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedElectronicDataSheetConfigurationSchema(
        self,
        electronicDataSheetId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get the configuration schema for a specific electronic data sheet.

        Args:
            electronicDataSheetId (str): ID of the electronic data sheet.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('electronicDataSheetId', 'String!', electronicDataSheetId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedElectronicDataSheetConfigurationSchema', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedHypervisorStatus(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get untyped status of hypervisor.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedHypervisorStatus', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedLogEntry(
        self,
        logEntryId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get a particular log entry without typing.

        Args:
            logEntryId (str): ID of the log entry.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logEntryId', 'String!', logEntryId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedLogEntry', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedModelProcessorProperties(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get untyped model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedModelProcessorState(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get untyped model processor state in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedModelProcessorState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedSchema(
        self,
        schemaId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get untyped JSON schema by the schema ID.

        Args:
            schemaId (str): ID of the schema.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('schemaId', 'String!', schemaId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedSchema', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedWebAppConfiguration(
        self,
        webAppId: str,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Get web app configuration without typing.

        Args:
            webAppId (str): ID of the web app, for example "app-scene-editor".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('webAppId', 'String!', webAppId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedWebAppConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetVisionTaskModuleByVisionTaskType(
        self,
        visionTaskType: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get vision task module by vision task type.

        Args:
            visionTaskType (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            VisionTaskModule: Vision task module library type.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('visionTaskType', 'String!', visionTaskType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetVisionTaskModuleByVisionTaskType', parameterNameTypeValues=parameterNameTypeValues, returnType='VisionTaskModule', fields=fields, timeout=timeout)

    def GetWebApp(
        self,
        webAppId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get a specific web app.

        Args:
            webAppId (str): ID of an existing web app.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            WebApp: WebApp for the frontend.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('webAppId', 'String!', webAppId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetWebApp', parameterNameTypeValues=parameterNameTypeValues, returnType='WebApp', fields=fields, timeout=timeout)

    def GetWebStackConfiguration(
        self,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get configurations for WebStack.

        Args:
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            WebStackConfiguration: WebStack specific configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetWebStackConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='WebStackConfiguration', fields=fields, timeout=timeout)

    def GetWebStackState(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Get published component states of WebStack.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            WebStackState: WebStackState contains published component states of WebStack.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='GetWebStackState', parameterNameTypeValues=parameterNameTypeValues, returnType='WebStackState', fields=fields, timeout=timeout)

    def IsAttachedSensorMoveable(
        self,
        attachedSensorName: str,
        bodyName: str,
        environmentId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> bool:
        """Check and see if attached sensor is moveable on a robot

        Args:
            attachedSensorName (str): Name of the attached sensor, could be in the format of "connectedBodyName_attachedSensorName"
            bodyName (str): Name of the body to check
            environmentId (str): ID of the environment to check
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            bool: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('attachedSensorName', 'String!', attachedSensorName),
            ('bodyName', 'String!', bodyName),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='IsAttachedSensorMoveable', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def IsSensorLinkMoveable(
        self,
        bodyName: str,
        environmentId: str,
        sensorLinkName: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> bool:
        """Check and see if sensor link is moveable on a robot

        Args:
            bodyName (str): Name of the body to check
            environmentId (str): ID of the environment to check
            sensorLinkName (str): Name of the sensor link, could be in the format of "connectedBodyName_sensorLinkName"
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            bool: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyName', 'String!', bodyName),
            ('environmentId', 'String!', environmentId),
            ('sensorLinkName', 'String!', sensorLinkName),
        ]
        return self._CallSimpleGraphAPI('query', operationName='IsSensorLinkMoveable', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListAlarmDefinitions(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List all alarm definitions.

        Args:
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListAlarmDefinitionsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListAlarmDefinitions', parameterNameTypeValues=parameterNameTypeValues, returnType='ListAlarmDefinitionsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListAllLogEntryTypes(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """List all implemented log entry types

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [LogType]: Log type of an entry
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='ListAllLogEntryTypes', parameterNameTypeValues=parameterNameTypeValues, returnType='LogType', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListAncestorLogEntries(
        self,
        logEntryId: str,
        ancestorLogTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """For a given list of log entry ids, find all the ancestor log entries. (parent and grand parent and so on)

        Deprecated:
            Use `ListAncestorLogEntriesEx` instead.

        Args:
            logEntryId (str): ID of the log entry.
            ancestorLogTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListAncestorLogEntriesExReturnValue:
        """
        warnings.warn('"ListAncestorLogEntries" is deprecated. Use `ListAncestorLogEntriesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logEntryId', 'String!', logEntryId),
            ('ancestorLogTypes', '[LogType!]', ancestorLogTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListAncestorLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListAncestorLogEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListAncestorLogEntriesEx(
        self,
        logEntryIds: List[str],
        ancestorLogTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """For a given list of log entry ids, find all the ancestor log entries. (parent and grand parent and so on)

        Args:
            logEntryIds ([String]): Log entry IDs.
            ancestorLogTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListAncestorLogEntriesExReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logEntryIds', '[String!]!', logEntryIds),
            ('ancestorLogTypes', '[LogType!]', ancestorLogTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListAncestorLogEntriesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListAncestorLogEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListApplicationConfigurations(
        self,
        applicationId: Optional[str] = None,
        options: Optional[Any] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List application available configurations using aggregation options.

        Args:
            applicationId (str, optional): ID of the application.
            options (ListOptionsWithAggregationsInput, optional):
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListApplicationConfigurationsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('applicationId', 'String', applicationId),
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListApplicationConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListApplicationConfigurationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListAttachedSensors(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List attached sensors defined on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListAttachedSensorsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListAttachedSensors', parameterNameTypeValues=parameterNameTypeValues, returnType='ListAttachedSensorsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListBodies(
        self,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List bodies in an environment.

        Args:
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListBodiesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListBodies', parameterNameTypeValues=parameterNameTypeValues, returnType='ListBodiesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListChildlessLogEntries(
        self,
        childLogTypes: Optional[List[Any]] = None,
        logTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List log entries that do not have child log entry.

        Args:
            childLogTypes ([LogType], optional): Filter by child log entry type.
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListChildlessLogEntriesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('childLogTypes', '[LogType!]', childLogTypes),
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListChildlessLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListChildlessLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListConfigurationRevisions(
        self,
        configurationId: str,
        options: Optional[Any] = None,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """list revisions of a configuration.

        Args:
            configurationId (str): ID of the configuration.
            options (ListOptionsWithAggregationsInput, optional):
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListConfigurationRevisionsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListConfigurationRevisions', parameterNameTypeValues=parameterNameTypeValues, returnType='ListConfigurationRevisionsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListConfigurations(
        self,
        options: Optional[Any] = None,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available configurations.

        Deprecated:
            Use `ListConfigurationsEx` instead.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListConfigurationsReturnValue:
        """
        warnings.warn('"ListConfigurations" is deprecated. Use `ListConfigurationsEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListConfigurationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListConfigurationsEx(
        self,
        options: Optional[Any] = None,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available configurations using aggregation options.

        Args:
            options (ListOptionsWithAggregationsInput, optional):
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListConfigurationsExReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListConfigurationsEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListConfigurationsExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListConnectedBodies(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List connected bodies defined on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListConnectedBodiesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListConnectedBodies', parameterNameTypeValues=parameterNameTypeValues, returnType='ListConnectedBodiesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListDescendantLogEntries(
        self,
        logEntryId: str,
        descendantLogTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """For a given list of log entry ids, find all the descendant log entries. (children and grand children and so on)

        Deprecated:
            Use `ListDescendantLogEntriesEx` instead.

        Args:
            logEntryId (str): ID of the log entry.
            descendantLogTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListDescendantLogEntriesExReturnValue:
        """
        warnings.warn('"ListDescendantLogEntries" is deprecated. Use `ListDescendantLogEntriesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logEntryId', 'String!', logEntryId),
            ('descendantLogTypes', '[LogType!]', descendantLogTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListDescendantLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListDescendantLogEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListDescendantLogEntriesEx(
        self,
        logEntryIds: List[str],
        descendantLogTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """For a given list of log entry ids, find all the descendant log entries. (children and grand children and so on)

        Args:
            logEntryIds ([String]): Log entry IDs.
            descendantLogTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListDescendantLogEntriesExReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logEntryIds', '[String!]!', logEntryIds),
            ('descendantLogTypes', '[LogType!]', descendantLogTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListDescendantLogEntriesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListDescendantLogEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListDetectorModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List detector modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListDetectorModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListDetectorModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListDetectorModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListDeviceBridgeModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List device bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListDeviceBridgeModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListDeviceBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListDeviceBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListElectronicDataSheets(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available electronic data sheets.

        Args:
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListElectronicDataSheetsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListElectronicDataSheets', parameterNameTypeValues=parameterNameTypeValues, returnType='ListElectronicDataSheetsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListEnvironmentRevisions(
        self,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List revisions of an environment.

        Args:
            environmentId (str): ID of the environment.
            options (ListOptionsWithAggregationsInput, optional):
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListEnvironmentRevisionsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListEnvironmentRevisions', parameterNameTypeValues=parameterNameTypeValues, returnType='ListEnvironmentRevisionsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListEnvironments(
        self,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List all environments.

        Deprecated:
            Use `ListEnvironmentsEx` instead.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListEnvironmentsReturnValue:
        """
        warnings.warn('"ListEnvironments" is deprecated. Use `ListEnvironmentsEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='ListEnvironmentsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListEnvironmentsEx(
        self,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List environments with aggregations.

        Args:
            options (ListOptionsWithAggregationsInput, optional):
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListEnvironmentsExReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListEnvironmentsEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListEnvironmentsExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListEtherCATSubDeviceInformations(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available ethercat sub-device informations.

        Args:
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListEtherCATSubDeviceInformationsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListEtherCATSubDeviceInformations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListEtherCATSubDeviceInformationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListExecutorModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List executor modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListExecutorModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListExecutorModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListExecutorModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGeometries(
        self,
        bodyId: str,
        environmentId: str,
        linkId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List geometries in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            linkId (str): ID of the link.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGeometriesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGeometries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGeometriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGrabbeds(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List grabbed objects in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGrabbedsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGrabbeds', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGrabbedsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGraspSets(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List grasp sets in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGraspSetsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGraspSets', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGraspSetsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGripperBridgeModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List gripper bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGripperBridgeModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGripperBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGripperBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGripperInfoAirChannels(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfoId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List air channels defined in a gripper info.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoId (str): ID of the gripper info
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGripperInfoAirChannelsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGripperInfoAirChannels', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGripperInfoAirChannelsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGripperInfos(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List gripper infos defined on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGripperInfosReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGripperInfos', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGripperInfosReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGroups(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List user groups.

        Args:
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGroupsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGroups', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGroupsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListIKParameterizations(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List ikparams in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListIKParameterizationsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListIKParameterizations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListIKParameterizationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListInputOutputDeviceDescriptions(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available input/output device descriptions.

        Args:
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListInputOutputDeviceDescriptionsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListInputOutputDeviceDescriptions', parameterNameTypeValues=parameterNameTypeValues, returnType='ListInputOutputDeviceDescriptionsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListJoints(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List joints in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListJointsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListJoints', parameterNameTypeValues=parameterNameTypeValues, returnType='ListJointsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListLinks(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List links in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListLinksReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLinks', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLinksReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListLogEntries(
        self,
        logTypes: Optional[List[str]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available log entries.

        Deprecated:
            Use `ListLogEntriesEx` instead.

        Args:
            logTypes ([String], optional): Filter by log entry type.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListLogEntriesReturnValue:
        """
        warnings.warn('"ListLogEntries" is deprecated. Use `ListLogEntriesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logTypes', '[String!]', logTypes),
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListLogEntriesEx(
        self,
        logTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available log entries with new aggregation options.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListLogEntriesExReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLogEntriesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLogEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListLogEntriesV2(
        self,
        logTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available log entries with new aggregation options.

        Deprecated:
            Use `ListLogEntriesEx` instead.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListLogEntriesV2ReturnValue:
        """
        warnings.warn('"ListLogEntriesV2" is deprecated. Use `ListLogEntriesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLogEntriesV2', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLogEntriesV2ReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListModules(
        self,
        moduleTypes: Optional[List[str]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available modules.

        Args:
            moduleTypes ([String], optional): Filter by module type.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('moduleTypes', '[String!]', moduleTypes),
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListNonReferencedLogEntries(
        self,
        logTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List log entries that are not referenced by any other log entry.

        Deprecated:
            Use `ListChildlessLogEntries` instead.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListChildlessLogEntriesReturnValue:
        """
        warnings.warn('"ListNonReferencedLogEntries" is deprecated. Use `ListChildlessLogEntries` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListNonReferencedLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListChildlessLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListNonReferencingLogEntries(
        self,
        logTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List log entries that are not referencing any other log entry.

        Deprecated:
            Use `ListParentlessLogEntries` instead.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListParentlessLogEntriesReturnValue:
        """
        warnings.warn('"ListNonReferencingLogEntries" is deprecated. Use `ListParentlessLogEntries` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListNonReferencingLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListParentlessLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListOrchestratorModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List orchestrator modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListOrchestratorModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListOrchestratorModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListOrchestratorModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListParentlessLogEntries(
        self,
        logTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List log entries that do not have parent log entry.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListParentlessLogEntriesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListParentlessLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListParentlessLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListPendantModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List pendant modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListPendantModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListPendantModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListPendantModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListPositionConfigurations(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List position configurations in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListPositionConfigurationsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListPositionConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListPositionConfigurationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListPrograms(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List all programs.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListProgramsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListPrograms', parameterNameTypeValues=parameterNameTypeValues, returnType='ListProgramsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListProviderBridgeModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List provider bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListProviderBridgeModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListProviderBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListProviderBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListReferencedApplicationConfigurations(
        self,
        relativeConfigurationIds: List[str],
        applicationId: Optional[str] = None,
        options: Optional[Any] = None,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Given the application id and a list of configuration ids, list all the configurations they reference to.

        Args:
            relativeConfigurationIds ([String]): List of configuration IDs.
            applicationId (str, optional): ID of the application.
            options (ListOptionsWithAggregationsInput, optional):
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListReferencedApplicationConfigurationsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('relativeConfigurationIds', '[String!]!', relativeConfigurationIds),
            ('applicationId', 'String', applicationId),
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListReferencedApplicationConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListReferencedApplicationConfigurationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListReferencedConfigurations(
        self,
        configurationIds: List[str],
        options: Optional[Any] = None,
        recursive: Optional[bool] = None,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Given a list of configuration ids, list all the configurations they reference to.

        Args:
            configurationIds ([String]): List of configuration IDs.
            options (ListOptionsWithAggregationsInput, optional):
            recursive (bool, optional): Whether to resolve reference recursively.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListReferencedConfigurationsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationIds', '[String!]!', configurationIds),
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('recursive', 'Boolean', recursive),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListReferencedConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListReferencedConfigurationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListReferencedLogEntries(
        self,
        logEntryId: str,
        logTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List particular log entries and their parents.

        Deprecated:
            Use `ListAncestorLogEntriesEx` instead.

        Args:
            logEntryId (str): ID of the log entry.
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListAncestorLogEntriesExReturnValue:
        """
        warnings.warn('"ListReferencedLogEntries" is deprecated. Use `ListAncestorLogEntriesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logEntryId', 'String!', logEntryId),
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListReferencedLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListAncestorLogEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListReferencingConfigurations(
        self,
        configurationIds: List[str],
        options: Optional[Any] = None,
        recursive: Optional[bool] = None,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Given a list of configuration ids, list all the configurations that are referencing them.

        Args:
            configurationIds ([String]): List of configuration IDs.
            options (ListOptionsWithAggregationsInput, optional):
            recursive (bool, optional): Whether to resolve reference recursively.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListReferencingConfigurationsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationIds', '[String!]!', configurationIds),
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('recursive', 'Boolean', recursive),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListReferencingConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListReferencingConfigurationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListReferencingLogEntries(
        self,
        logEntryId: str,
        logTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List particular log entries and their children.

        Deprecated:
            Use `ListDescendantLogEntriesEx` instead.

        Args:
            logEntryId (str): ID of the log entry.
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListDescendantLogEntriesExReturnValue:
        """
        warnings.warn('"ListReferencingLogEntries" is deprecated. Use `ListDescendantLogEntriesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logEntryId', 'String!', logEntryId),
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListReferencingLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListDescendantLogEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListRobotBridgeModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List robot bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListRobotBridgeModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListRobotBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListRobotBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListRoles(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List group roles.

        Args:
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListRolesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListRoles', parameterNameTypeValues=parameterNameTypeValues, returnType='ListRolesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListScheduleEventsWithInstances(
        self,
        instancesEndedAt: Optional[Any] = None,
        instancesStartedAt: Optional[Any] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List schedule events with matching instances.

        Args:
            instancesEndedAt (DateTime, optional): The time until which schedule instances are requested.
            instancesStartedAt (DateTime, optional): The time from which schedule instances are requested.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListScheduleEventsWithInstancesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('instancesEndedAt', 'DateTime', instancesEndedAt),
            ('instancesStartedAt', 'DateTime', instancesStartedAt),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListScheduleEventsWithInstances', parameterNameTypeValues=parameterNameTypeValues, returnType='ListScheduleEventsWithInstancesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListSensorBridgeModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List sensor bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListSensorBridgeModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListSensorBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListSensorBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListStatEntries(
        self,
        endedAt: Optional[Any] = None,
        intervalType: Optional[str] = None,
        options: Optional[Any] = None,
        startedAt: Optional[Any] = None,
        statTypes: Optional[List[str]] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Lists all or specific types of statistics entries for a given time interval.

        Deprecated:
            Use `ListStatEntriesEx` instead.

        Args:
            endedAt (DateTime, optional): The time until which statistics entries are requested. Statistics will be returned including the interval that includes this time.
            intervalType (str, optional): The length of the intervals (i.e. the resolution) in which the statistic will be returned.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            startedAt (DateTime, optional): The time from which statistics entries are requested. Statistics will be returned from the interval that includes this time. For example, a request for hourly data starting from 12:30 will return hourly data starting from 12:00.
            statTypes ([String], optional): The type of statistics entries to list, defaults to list all.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListStatEntriesReturnValue:
        """
        warnings.warn('"ListStatEntries" is deprecated. Use `ListStatEntriesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('endedAt', 'DateTime', endedAt),
            ('intervalType', 'String', intervalType),
            ('options', 'ListOptionsInput', options),
            ('startedAt', 'DateTime', startedAt),
            ('statTypes', '[String!]', statTypes),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListStatEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListStatEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListStatEntriesEx(
        self,
        disableOriginClustering: Optional[bool] = None,
        endedAt: Optional[Any] = None,
        includeTimeZoneOffset: Optional[bool] = None,
        intervalType: Optional[Any] = None,
        options: Optional[Any] = None,
        startedAt: Optional[Any] = None,
        statTypes: Optional[List[Any]] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Lists all or specific types of statistics entries for a given time interval, with the new aggregation option.

        Args:
            disableOriginClustering (bool, optional): If true, disable clustering stat entries from different origins.
            endedAt (DateTime, optional): The time until which statistics entries are requested. Statistics will be returned including the interval that includes this time.
            includeTimeZoneOffset (bool, optional): If true, local time zone is included in the `startedAt` and `endedAt` timestamps.
            intervalType (IntervalType, optional): The length of the intervals (i.e. the resolution) in which the statistic will be returned.
            options (ListOptionsWithAggregationsInput, optional):
            startedAt (DateTime, optional): The time from which statistics entries are requested. Statistics will be returned from the interval that includes this time. For example, a request for hourly data starting from 12:30 will return hourly data starting from 12:00.
            statTypes ([StatType], optional): The type of statistics entries to list, defaults to list all.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListStatEntriesExReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('disableOriginClustering', 'Boolean', disableOriginClustering),
            ('endedAt', 'DateTime', endedAt),
            ('includeTimeZoneOffset', 'Boolean', includeTimeZoneOffset),
            ('intervalType', 'IntervalType', intervalType),
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('startedAt', 'DateTime', startedAt),
            ('statTypes', '[StatType!]', statTypes),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListStatEntriesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListStatEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListTools(
        self,
        bodyId: str,
        environmentId: str,
        options: Optional[Any] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List tools defined on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListToolsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListTools', parameterNameTypeValues=parameterNameTypeValues, returnType='ListToolsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListUntypedLogEntries(
        self,
        logTypes: Optional[List[Any]] = None,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available log entries without typing.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListUntypedLogEntriesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListUntypedLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListUntypedLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListUntypedStatEntries(
        self,
        disableOriginClustering: Optional[bool] = None,
        endedAt: Optional[Any] = None,
        intervalType: Optional[Any] = None,
        options: Optional[Any] = None,
        startedAt: Optional[Any] = None,
        statTypes: Optional[List[Any]] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List available stat entries without typing.

        Args:
            disableOriginClustering (bool, optional): If true, disable clustering stat entries from different origins.
            endedAt (DateTime, optional): The time until which statistics entries are requested. Statistics will be returned including the interval that includes this time.
            intervalType (IntervalType, optional): The length of the intervals (i.e. the resolution) in which the statistic will be returned.
            options (ListOptionsWithAggregationsInput, optional):
            startedAt (DateTime, optional): The time from which statistics entries are requested. Statistics will be returned from the interval that includes this time. For example, a request for hourly data starting from 12:30 will return hourly data starting from 12:00.
            statTypes ([StatType], optional): The type of statistics entries to list, defaults to list all.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListUntypedStatEntriesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('disableOriginClustering', 'Boolean', disableOriginClustering),
            ('endedAt', 'DateTime', endedAt),
            ('intervalType', 'IntervalType', intervalType),
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('startedAt', 'DateTime', startedAt),
            ('statTypes', '[StatType!]', statTypes),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListUntypedStatEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListUntypedStatEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListUsers(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List users of the system.

        Args:
            options (ListOptionsWithAggregationsInput, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListUsersReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListUsers', parameterNameTypeValues=parameterNameTypeValues, returnType='ListUsersReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListVisionTaskModules(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List vision task modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListVisionTaskModulesReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListVisionTaskModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListVisionTaskModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListWebApps(
        self,
        options: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """List all web apps.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListWebAppsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListWebApps', parameterNameTypeValues=parameterNameTypeValues, returnType='ListWebAppsReturnValue', fields=fields, timeout=timeout)

    def Ping(
        self,
        host: str,
        size: Optional[int] = None,
        ttl: Optional[int] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Ping a remote host.

        Args:
            host (str): the host name of the destination address
            size (int, optional): the package size to send
            ttl (int, optional): time to live of the package
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PingReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('host', 'String!', host),
            ('size', 'Int', size),
            ('ttl', 'Int', ttl),
        ]
        return self._CallSimpleGraphAPI('query', operationName='Ping', parameterNameTypeValues=parameterNameTypeValues, returnType='PingReturnValue', fields=fields, timeout=timeout)

    def QueryAvailableUpgrades(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """Query available upgrade images for this controller.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [HypervisorAvailableUpgrade]:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('query', operationName='QueryAvailableUpgrades', parameterNameTypeValues=parameterNameTypeValues, returnType='HypervisorAvailableUpgrade', fields=fields, timeout=timeout)

    def Telnet(
        self,
        host: str,
        port: int,
        data: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Telnet to a remote host using TCP.

        Args:
            host (str): the host name of the destination address
            port (int): the port number of the destination address
            data (Data, optional): bytes in base64 to be sent upon connection
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            TelnetReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('host', 'String!', host),
            ('port', 'Int!', port),
            ('data', 'Data', data),
        ]
        return self._CallSimpleGraphAPI('query', operationName='Telnet', parameterNameTypeValues=parameterNameTypeValues, returnType='TelnetReturnValue', fields=fields, timeout=timeout)

    def TraverseProgramCommits(
        self,
        commitId: str,
        limit: int,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """Traverse program commit objects starting from the given commit.

        Args:
            commitId (str): ID of the program commit object to be traversed.
            limit (int): Depth limit of the traversal.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [ProgramObject]: A blob, tree or commit object. Can be shared by multiple programs
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('commitId', 'String!', commitId),
            ('limit', 'Int!', limit),
        ]
        return self._CallSimpleGraphAPI('query', operationName='TraverseProgramCommits', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramObject', fields=fields, timeout=timeout)

    def TraverseProgramTrees(
        self,
        limit: int,
        objectId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """Traverse program tree objects starting from the given commit or tree.

        Args:
            limit (int): Depth limit of the traversal.
            objectId (str): ID of the program tree or commit object to be traversed.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [ProgramObject]: A blob, tree or commit object. Can be shared by multiple programs
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('limit', 'Int!', limit),
            ('objectId', 'String!', objectId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='TraverseProgramTrees', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramObject', fields=fields, timeout=timeout)


class GraphMutations:
    def ActivateRuntimeImage(
        self,
        imageId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Activate an runtime image.

        Args:
            imageId (str): ID of the runtime image to activate.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('imageId', 'String!', imageId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ActivateRuntimeImage', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def AddDiskDriveToDiskArray(
        self,
        diskArray: str,
        diskDrive: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Add a disk drive to a disk array.

        Args:
            diskArray (str): Array name, e.g. "/dev/md0".
            diskDrive (str): Drive name, e.g. "/dev/sda".
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('diskArray', 'String!', diskArray),
            ('diskDrive', 'String!', diskDrive),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='AddDiskDriveToDiskArray', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def AddPermissionToRole(
        self,
        permission: Any,
        roleId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Add a permission to a group.

        Args:
            permission (PermissionInput): Permission properties.
            roleId (str): ID of the role to add to.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('permission', 'PermissionInput!', permission),
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='AddPermissionToRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def AddRoleToGroup(
        self,
        groupId: str,
        roleId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Add a role to a group.

        Args:
            groupId (str): ID of the group to add to.
            roleId (str): ID of the role to add.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('groupId', 'String!', groupId),
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='AddRoleToGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def AddUserToGroup(
        self,
        groupId: str,
        userId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Add a user to a group.

        Args:
            groupId (str): ID of the group to add to.
            userId (str): ID of the user to add.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('groupId', 'String!', groupId),
            ('userId', 'String!', userId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='AddUserToGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def BeepPendantBuzzer(
        self,
        address: Optional[str] = None,
        duration: Optional[str] = None,
        period: Optional[str] = None,
        pulse: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Beep the pendant buzzer.

        Args:
            address (str, optional): Pendant address.
            duration (str, optional): Beep duration, for example "2s" or "200ms". 200ms is the default. The longest duration supported is 65535ms.
            period (str, optional): Beep pulse period, for example "2s" or "200ms". 999ms is the default. The longest pulse period supported is 65535ms.
            pulse (str, optional): Beep pulse width, for example "2s" or "200ms". 500ms is the default. The longest pulse width supported is 65535ms.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('address', 'String', address),
            ('duration', 'String', duration),
            ('period', 'String', period),
            ('pulse', 'String', pulse),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='BeepPendantBuzzer', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def CancelUpgrade(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Cancel ongoing upgrade.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='CancelUpgrade', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def CommandBaseSystemOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandBaseSystemOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandBaseSystemOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandBaseSystemOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandCalibrationOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandCalibrationOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandCalibrationOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandCalibrationOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandCameraCalibrationOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandCameraCalibrationOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandCameraCalibrationOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandCameraCalibrationOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandFleetOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandFleetOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandFleetOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandFleetOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandOrchestratorMaster(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandOrchestratorMasterMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='CommandOrchestratorMaster', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandOrchestratorMasterMutations', fields=fields, timeout=timeout)

    def CommandOrderCycleOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandOrderCycleOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandOrderCycleOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandOrderCycleOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandPackingClusterOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandPackingClusterOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandPackingClusterOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandPackingClusterOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandPackingOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandPackingOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandPackingOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandPackingOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandPlanningServer(
        self,
        command: str,
        environmentId: str,
        taskType: str,
        parameters: Optional[Any] = None,
        slaveRequestId: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Send command to planning server.

        Args:
            command (str): Command to be executed on planning slave.
            environmentId (str): ID of the environment to load on planning slave before executing the command.
            taskType (str): Task type.
            parameters (Any, optional): Additional optional parameters.
            slaveRequestId (str, optional): Optionally specify slave request id indicating which slave to execute the command on.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('command', 'String!', command),
            ('environmentId', 'String!', environmentId),
            ('taskType', 'String!', taskType),
            ('parameters', 'Any', parameters),
            ('slaveRequestId', 'String', slaveRequestId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandPlanningServer', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandProductionCycleOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandProductionCycleOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandProductionCycleOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandProductionCycleOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandRegistrationOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandRegistrationOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRegistrationOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRegistrationOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandRobotBridges(
        self,
        command: str,
        parameters: Optional[Any] = None,
        queueId: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """

        Deprecated:
            Use `CommandRobotBridgesEx` instead.

        Args:
            command (str):
            parameters (Any, optional):
            queueId (str, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        warnings.warn('"CommandRobotBridges" is deprecated. Use `CommandRobotBridgesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRobotBridges', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandRobotBridgesEx(
        self,
        queueId: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            queueId (str, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandRobotBridgesExMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRobotBridgesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotBridgesExMutations', fields=fields, timeout=timeout)

    def CommandRobotBridgesV2(
        self,
        queueId: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            queueId (str, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandRobotBridgesV2Mutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRobotBridgesV2', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotBridgesV2Mutations', fields=fields, timeout=timeout)

    def CommandRobotMotorControlOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandRobotMotorControlOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRobotMotorControlOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotMotorControlOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandSensorBridges(
        self,
        command: str,
        parameters: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """

        Deprecated:
            Use `CommandSensorBridgesEx` instead.

        Args:
            command (str):
            parameters (Any, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        warnings.warn('"CommandSensorBridges" is deprecated. Use `CommandSensorBridgesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandSensorBridges', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandSensorBridgesEx(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandSensorBridgesExMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='CommandSensorBridgesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandSensorBridgesExMutations', fields=fields, timeout=timeout)

    def CommandTeachWorkerOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandTeachWorkerOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandTeachWorkerOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandTeachWorkerOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandUserInterface(
        self,
        command: str,
        parameters: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """

        Args:
            command (str):
            parameters (Any, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandUserInterface', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandVisionManager(
        self,
        command: str,
        options: Optional[Any] = None,
        parameters: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """

        Deprecated:
            Use `CommandVisionManagerEx` instead.

        Args:
            command (str):
            options (VisionManagerOptionsInput, optional):
            parameters (Any, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        warnings.warn('"CommandVisionManager" is deprecated. Use `CommandVisionManagerEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('command', 'String!', command),
            ('options', 'VisionManagerOptionsInput', options),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandVisionManager', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandVisionManagerEx(
        self,
        slaverequestid: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            slaverequestid (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandVisionManagerExMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('slaverequestid', 'String!', slaverequestid),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandVisionManagerEx', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandVisionManagerExMutations', fields=fields, timeout=timeout)

    def CommandWarehouseExecutionOrchestrator(
        self,
        orchestratorId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            orchestratorId (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CommandWarehouseExecutionOrchestratorMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandWarehouseExecutionOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandWarehouseExecutionOrchestratorMutations', fields=fields, timeout=timeout)

    def ConfigureRobotBridges(
        self,
        command: str,
        parameters: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """

        Deprecated:
            Use `ConfigureRobotBridgesEx` instead.

        Args:
            command (str):
            parameters (Any, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        warnings.warn('"ConfigureRobotBridges" is deprecated. Use `ConfigureRobotBridgesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureRobotBridges', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def ConfigureRobotBridgesEx(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConfigureRobotBridgesExMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureRobotBridgesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigureRobotBridgesExMutations', fields=fields, timeout=timeout)

    def ConfigureRobotBridgesV2(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConfigureRobotBridgesV2Mutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureRobotBridgesV2', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigureRobotBridgesV2Mutations', fields=fields, timeout=timeout)

    def ConfigureSensorBridges(
        self,
        command: str,
        parameters: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """

        Deprecated:
            Use `ConfigureSensorBridgesEx` instead.

        Args:
            command (str):
            parameters (Any, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        warnings.warn('"ConfigureSensorBridges" is deprecated. Use `ConfigureSensorBridgesEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureSensorBridges', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def ConfigureSensorBridgesEx(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConfigureSensorBridgesExMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureSensorBridgesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigureSensorBridgesExMutations', fields=fields, timeout=timeout)

    def ConfigureUserInterface(
        self,
        command: str,
        parameters: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """

        Args:
            command (str):
            parameters (Any, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureUserInterface', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def ConfigureVisionManager(
        self,
        command: str,
        options: Optional[Any] = None,
        parameters: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """

        Deprecated:
            Use `ConfigureVisionManagerEx` instead.

        Args:
            command (str):
            options (VisionManagerOptionsInput, optional):
            parameters (Any, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        warnings.warn('"ConfigureVisionManager" is deprecated. Use `ConfigureVisionManagerEx` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('command', 'String!', command),
            ('options', 'VisionManagerOptionsInput', options),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureVisionManager', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def ConfigureVisionManagerEx(
        self,
        slaverequestid: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """

        Args:
            slaverequestid (str):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConfigureVisionManagerExMutations:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('slaverequestid', 'String!', slaverequestid),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureVisionManagerEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigureVisionManagerExMutations', fields=fields, timeout=timeout)

    def CopyAllApplicationConfigurations(
        self,
        applicationId: str,
        referenceApplicationId: str,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[str]:
        """Copy all configurations that belong to an application, returns the list of modified relative configuration ids.

        Args:
            applicationId (str): ID of the destination application.
            referenceApplicationId (str): ID of the source application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [String]: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('applicationId', 'String!', applicationId),
            ('referenceApplicationId', 'String!', referenceApplicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyAllApplicationConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def CopyApplicationConfiguration(
        self,
        referenceRelativeConfigurationId: str,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Copy application configuration.

        Args:
            referenceRelativeConfigurationId (str): ID of the source configuration, for example "controllersystem.conf".
            relativeConfigurationId (str): ID of the destination configuration, for example "controllersystem.conf".
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('referenceRelativeConfigurationId', 'String!', referenceRelativeConfigurationId),
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CopyAttachedSensor(
        self,
        attachedSensor: Any,
        attachedSensorId: str,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing attached sensor on a robot to a new one.

        Args:
            attachedSensor (AttachedSensorInput): Properties to change on the copied the attached sensor.
            attachedSensorId (str): ID of the existing attached sensor.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def CopyBody(
        self,
        body: Any,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing body in an environment to a new one.

        Args:
            body (BodyInput): Properties to be applied on the copied body.
            bodyId (str): ID of the existing body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def CopyConfiguration(
        self,
        configurationId: str,
        referenceConfigurationId: str,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Copy configuration.

        Args:
            configurationId (str): ID of the destination configuration, for example "controllersystem.conf".
            referenceConfigurationId (str): ID of the source configuration, for example "controllersystem.conf".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('referenceConfigurationId', 'String!', referenceConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CopyConnectedBody(
        self,
        bodyId: str,
        connectedBody: Any,
        connectedBodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing connected body on a robot to a new one.

        Args:
            bodyId (str): ID of the body.
            connectedBody (ConnectedBodyInput): Properties to change on the copied the connected body.
            connectedBodyId (str): ID of the existing connected body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def CopyEnvironment(
        self,
        environment: Any,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing environment to a new one.

        Args:
            environment (EnvironmentInput): Properties to be applied on the copied environment.
            environmentId (str): ID of the existing environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def CopyGeometry(
        self,
        bodyId: str,
        environmentId: str,
        geometry: Any,
        geometryId: str,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing geometry in a link to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometry (GeometryInput): Properties to be applied on the copied geometry.
            geometryId (str): ID of the existing geometry.
            linkId (str): ID of the link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def CopyGrabbed(
        self,
        bodyId: str,
        environmentId: str,
        grabbed: Any,
        grabbedId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing grabbed object in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbed (GrabbedInput): Properties to be applied on the copied grabbed object.
            grabbedId (str): ID of the existing grabbed object.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('grabbedId', 'String!', grabbedId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def CopyGraspSet(
        self,
        bodyId: str,
        environmentId: str,
        graspSet: Any,
        graspSetId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing grasp set in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSet (GraspSetInput): Properties to be applied on the copied grasp set.
            graspSetId (str): ID of the existing grasp set.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('graspSetId', 'String!', graspSetId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def CopyGripperInfo(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfo: Any,
        gripperInfoId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing gripper info on a robot to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfo (GripperInfoInput): Properties to change on the copied the gripper info.
            gripperInfoId (str): ID of the existing gripper info.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def CopyGripperInfoAirChannel(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfoAirChannel: Any,
        gripperInfoAirChannelId: str,
        gripperInfoId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing air channel on a robot to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoAirChannel (GripperInfoAirChannelInput): Properties to change on the copied air channel.
            gripperInfoAirChannelId (str): ID of the existing air channel.
            gripperInfoId (str): ID of the gripper info
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfoAirChannel: The information about each air channel.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoAirChannel', 'GripperInfoAirChannelInput!', gripperInfoAirChannel),
            ('gripperInfoAirChannelId', 'String!', gripperInfoAirChannelId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGripperInfoAirChannel', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfoAirChannel', fields=fields, timeout=timeout)

    def CopyIKParameterization(
        self,
        bodyId: str,
        environmentId: str,
        ikParam: Any,
        ikParamId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing ikparam in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParam (IKParameterizationInput): Properties to be applied on the copied ikparam.
            ikParamId (str): ID of the existing ikparam.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameterization describes a pose in space. Includes additional parameters that can affect grasping (e.g. Direction, Angle).
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('ikParamId', 'String!', ikParamId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def CopyLink(
        self,
        bodyId: str,
        environmentId: str,
        link: Any,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing link in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            link (LinkInput): Properties to be applied on the copied link.
            linkId (str): ID of the existing link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def CopyLinkAndJoint(
        self,
        bodyId: str,
        environmentId: str,
        joint: Any,
        link: Any,
        linkId: str,
        parentLinkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing link and joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            joint (JointInput): Properties to be applied on the copied joint.
            link (LinkInput): Properties to be applied on the copied link.
            linkId (str): ID of the existing link.
            parentLinkId (str): ID of the parent link where copied link belongs to.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CopyLinkAndJointReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('parentLinkId', 'String!', parentLinkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyLinkAndJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='CopyLinkAndJointReturnValue', fields=fields, timeout=timeout)

    def CopyPositionConfiguration(
        self,
        bodyId: str,
        environmentId: str,
        positionConfiguration: Any,
        positionConfigurationId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing position configuration in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfiguration (PositionConfigurationInput): Properties to be applied on the copied position configuration.
            positionConfigurationId (str): ID of the existing position configuration.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def CopyProgram(
        self,
        program: Any,
        programId: str,
        commitOptions: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy a program. Copy is done by forking the git repository.

        Args:
            program (ProgramInput): Properties to be applied on the copied program. ID of the copied program should be specified.
            programId (str): ID of the program to be copied.
            commitOptions (CommitOptionsInput, optional): Commit options.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Program: ITL program.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('program', 'ProgramInput!', program),
            ('programId', 'String!', programId),
            ('commitOptions', 'CommitOptionsInput', commitOptions),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Program', fields=fields, timeout=timeout)

    def CopyProgramReference(
        self,
        programId: str,
        reference: Any,
        referenceId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy a program reference.

        Args:
            programId (str): ID of the program.
            reference (ProgramReferenceInput): Properties to be applied on the copied reference. ID of the copied reference must be set.
            referenceId (str): ID of the reference to be copied.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramReference: A named reference pointing to a commit object.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('programId', 'String!', programId),
            ('reference', 'ProgramReferenceInput!', reference),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramReference', fields=fields, timeout=timeout)

    def CopySignalMapConfiguration(
        self,
        referenceRelativeConfigurationId: str,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy signal map and return copied signal map.

        Args:
            referenceRelativeConfigurationId (str): ID of the source signal map, for example "signalmaps/custom.signalmap".
            relativeConfigurationId (str): ID of the destination signal map, for example "signalmaps/custom.signalmap".
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SignalMapConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('referenceRelativeConfigurationId', 'String!', referenceRelativeConfigurationId),
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopySignalMapConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SignalMapConfiguration', fields=fields, timeout=timeout)

    def CopyTool(
        self,
        bodyId: str,
        environmentId: str,
        tool: Any,
        toolId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Copy an existing tool on a robot to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            tool (ToolInput): Properties to change on the copied the tool.
            toolId (str): ID of the existing tool.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('toolId', 'String!', toolId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def CopyWebAppConfiguration(
        self,
        referenceWebAppId: str,
        webAppId: str,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Copy configuration for one web app to another, return copied content without typing.

        Args:
            referenceWebAppId (str): ID of the source web app, for example "app-scene-editor".
            webAppId (str): ID of the target web app, for example "app-scene-editor".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('referenceWebAppId', 'String!', referenceWebAppId),
            ('webAppId', 'String!', webAppId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyWebAppConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CreateAppearanceParameters(
        self,
        appearanceParameters: Any,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new appearance parameters in a body.

        Args:
            appearanceParameters (AppearanceParametersInput): Properties to be applied on the newly created appearance parameters.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AppearanceParameters: A set of parameters that vision detector uses.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('appearanceParameters', 'AppearanceParametersInput!', appearanceParameters),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='AppearanceParameters', fields=fields, timeout=timeout)

    def CreateAttachedSensor(
        self,
        attachedSensor: Any,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new attached sensor on a robot.

        Args:
            attachedSensor (AttachedSensorInput): Properties for the new attached sensor.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def CreateBody(
        self,
        body: Any,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new body in an environment.

        Args:
            body (BodyInput): Properties to be applied on the newly created body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('body', 'BodyInput!', body),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def CreateBodyParameters(
        self,
        bodyId: str,
        bodyParameters: Any,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new body parameters in a body.

        Args:
            bodyId (str): ID of the body.
            bodyParameters (BodyParametersInput): Properties to be applied on the newly created body parameters.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            BodyParameters: Parameters of an OpenRAVE 'Body'
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('bodyParameters', 'BodyParametersInput!', bodyParameters),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def CreateConnectedBody(
        self,
        bodyId: str,
        connectedBody: Any,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new connected body on a robot.

        Args:
            bodyId (str): ID of the body.
            connectedBody (ConnectedBodyInput): Properties for the new connected body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def CreateEnvironment(
        self,
        environment: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new environment.

        Args:
            environment (EnvironmentInput): Properties to be applied on the newly created environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environment', 'EnvironmentInput!', environment),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def CreateFeedbackHistory(
        self,
        bodyId: str,
        environmentId: str,
        feedbackHistory: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new feedback history in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            feedbackHistory (FeedbackHistoryInput): Properties to be applied on the newly created feedback history.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            FeedbackHistory: The history of feedback from robotic system such as measured mass, final status of pick (success/piecelost etc.), options that were used for chucking etc.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('feedbackHistory', 'FeedbackHistoryInput!', feedbackHistory),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateFeedbackHistory', parameterNameTypeValues=parameterNameTypeValues, returnType='FeedbackHistory', fields=fields, timeout=timeout)

    def CreateGeometry(
        self,
        bodyId: str,
        environmentId: str,
        geometry: Any,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new geometry in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometry (GeometryInput): Properties to be applied on the newly created geometry.
            linkId (str): ID of the existing geometry.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def CreateGrabbed(
        self,
        bodyId: str,
        environmentId: str,
        grabbed: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new grabbed object in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbed (GrabbedInput): Properties to be applied on the newly created grabbed object.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def CreateGraspSet(
        self,
        bodyId: str,
        environmentId: str,
        graspSet: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new grasp set in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSet (GraspSetInput): Properties to be applied on the newly created grasp set.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def CreateGripperInfo(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfo: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new gripper info on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfo (GripperInfoInput): Properties for the new gripper info.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def CreateGripperInfoAirChannel(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfoAirChannel: Any,
        gripperInfoId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new air channel on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoAirChannel (GripperInfoAirChannelInput): Properties for the new air channel.
            gripperInfoId (str): ID of the gripper info
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfoAirChannel: The information about each air channel.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoAirChannel', 'GripperInfoAirChannelInput!', gripperInfoAirChannel),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGripperInfoAirChannel', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfoAirChannel', fields=fields, timeout=timeout)

    def CreateGroup(
        self,
        group: Any,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new group.

        Args:
            group (GroupInput): Properties to be applied on the created group.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Group: Group of multiple User, a User can belong to multiple Group.
                    A User must belong to a Group to receive Role assignment.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('group', 'GroupInput!', group),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Group', fields=fields, timeout=timeout)

    def CreateIKParameterization(
        self,
        bodyId: str,
        environmentId: str,
        ikParam: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new ikparam in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParam (IKParameterizationInput): Properties to be applied on the newly created ikparam.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameterization describes a pose in space. Includes additional parameters that can affect grasping (e.g. Direction, Angle).
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def CreateLink(
        self,
        bodyId: str,
        environmentId: str,
        link: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a top-level link in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            link (LinkInput): Properties to be applied on the newly created link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def CreateLinkAndJoint(
        self,
        bodyId: str,
        environmentId: str,
        link: Any,
        joint: Optional[Any] = None,
        parentLinkId: Optional[str] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new link and joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            link (LinkInput): Properties to be applied on the newly created link.
            joint (JointInput, optional): Properties to be applied on the newly created joint. When creating base link, no joint will be created.
            parentLinkId (str, optional): ID of the parent link, if any. When creating base link, do not supply parent link ID.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CreateLinkAndJointReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('joint', 'JointInput', joint),
            ('parentLinkId', 'String', parentLinkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateLinkAndJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='CreateLinkAndJointReturnValue', fields=fields, timeout=timeout)

    def CreateModelProcessorProperties(
        self,
        bodyId: str,
        environmentId: str,
        modelProcessorProperties: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            modelProcessorProperties (ModelProcessorPropertiesInput): Properties to be applied on the newly created model processor properties.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorProperties: A set of values related to the latest model processing state
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('modelProcessorProperties', 'ModelProcessorPropertiesInput!', modelProcessorProperties),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorProperties', fields=fields, timeout=timeout)

    def CreatePositionConfiguration(
        self,
        bodyId: str,
        environmentId: str,
        positionConfiguration: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new position configuration in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfiguration (PositionConfigurationInput): Properties to be applied on the newly created position configuration.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreatePositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def CreateProgram(
        self,
        program: Any,
        commitOptions: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a program.

        Args:
            program (ProgramInput): Properties to be applied on the created program. ID of the program should be specified.
            commitOptions (CommitOptionsInput, optional): Commit options.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Program: ITL program.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('program', 'ProgramInput!', program),
            ('commitOptions', 'CommitOptionsInput', commitOptions),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Program', fields=fields, timeout=timeout)

    def CreateProgramReference(
        self,
        programId: str,
        reference: Any,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a program reference.

        Args:
            programId (str): ID of the program.
            reference (ProgramReferenceInput): Properties to be applied on the created reference. ID of the reference must be set.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramReference: A named reference pointing to a commit object.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('programId', 'String!', programId),
            ('reference', 'ProgramReferenceInput!', reference),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramReference', fields=fields, timeout=timeout)

    def CreateRobotMotionParameters(
        self,
        bodyId: str,
        environmentId: str,
        robotMotionParameters: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new robot motion parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            robotMotionParameters (RobotMotionParametersInput): Properties to be applied on the newly created robot motion parameters.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('robotMotionParameters', 'RobotMotionParametersInput!', robotMotionParameters),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def CreateRole(
        self,
        role: Any,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new role.

        Args:
            role (RoleInput): Properties to be applied on the created role.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Role: Each Group can have zero or more Role assigned.
                    A Role can be assigned to multiple Group.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('role', 'RoleInput!', role),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Role', fields=fields, timeout=timeout)

    def CreateScheduleEvent(
        self,
        scheduleEvent: Any,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new schedule event.

        Args:
            scheduleEvent (ScheduleEventInput): A list of schedule events.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ScheduleEvent:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('scheduleEvent', 'ScheduleEventInput!', scheduleEvent),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateScheduleEvent', parameterNameTypeValues=parameterNameTypeValues, returnType='ScheduleEvent', fields=fields, timeout=timeout)

    def CreateTool(
        self,
        bodyId: str,
        environmentId: str,
        tool: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new tool on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            tool (ToolInput): Properties for the new tool.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def CreateUser(
        self,
        user: Any,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Create a new user.

        Args:
            user (UserInput): Properties to be applied on the created user.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            User: Represents one identity, such as “John Doe”.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('user', 'UserInput!', user),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateUser', parameterNameTypeValues=parameterNameTypeValues, returnType='User', fields=fields, timeout=timeout)

    def DeleteAllApplicationConfigurations(
        self,
        applicationId: str,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[str]:
        """Delete all configurations belong to an application, returns the list of deleted relative configuration ids.

        Args:
            applicationId (str): ID of the application to delete.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [String]: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('applicationId', 'String!', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteAllApplicationConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def DeleteAppearanceParameters(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a appearance parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteApplicationConfiguration(
        self,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete application configuration.

        Args:
            relativeConfigurationId (str): ID of the configuration to delete.
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteAttachedSensor(
        self,
        attachedSensorId: str,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a attached sensor from a robot.

        Args:
            attachedSensorId (str): ID of the attached sensor to delete.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteBody(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a body in an environment.

        Args:
            bodyId (str): ID of the body to delete.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteBodyParameters(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a body parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteConfiguration(
        self,
        configurationId: str,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete configuration.

        Args:
            configurationId (str): ID of the configuration to delete.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteConfigurations(
        self,
        configurationIds: List[str],
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete configurations.

        Args:
            configurationIds ([String]): ID of the configurations to delete.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationIds', '[String!]!', configurationIds),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteConnectedBody(
        self,
        bodyId: str,
        connectedBodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a connected body from a robot.

        Args:
            bodyId (str): ID of the body.
            connectedBodyId (str): ID of the connected body to delete.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteElectronicDataSheet(
        self,
        electronicDataSheetId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete an electronic data sheet.

        Args:
            electronicDataSheetId (str): ID of the electronic data sheet.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('electronicDataSheetId', 'String!', electronicDataSheetId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteElectronicDataSheet', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteEnvironment(
        self,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete an environment.

        Args:
            environmentId (str): ID of the environment to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteEnvironments(
        self,
        environmentIds: List[str],
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete multiple environments.

        Args:
            environmentIds ([String]): IDs of the environments to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentIds', '[String!]!', environmentIds),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteEtherCATSubDeviceInformation(
        self,
        etherCatSubDeviceInformationId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete an ethercat sub-device information.

        Args:
            etherCatSubDeviceInformationId (str): ID of the ethercat sub-device information.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('etherCatSubDeviceInformationId', 'String!', etherCatSubDeviceInformationId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteEtherCATSubDeviceInformation', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteFeedbackHistory(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a feedback history in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteFeedbackHistory', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGeometry(
        self,
        bodyId: str,
        environmentId: str,
        geometryId: str,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a geometry in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometryId (str): ID of the geometry to delete.
            linkId (str): ID of the link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGrabbed(
        self,
        bodyId: str,
        environmentId: str,
        grabbedId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a grabbed object in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbedId (str): ID of the grabbed object to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbedId', 'String!', grabbedId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGraspSet(
        self,
        bodyId: str,
        environmentId: str,
        graspSetId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a grasp set in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSetId (str): ID of the grasp set to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSetId', 'String!', graspSetId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGripperInfo(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfoId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a gripper info from a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoId (str): ID of the gripper info to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGripperInfoAirChannel(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfoAirChannelId: str,
        gripperInfoId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete an air channel from a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoAirChannelId (str): ID of the air channel to delete.
            gripperInfoId (str): ID of the gripper info
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoAirChannelId', 'String!', gripperInfoAirChannelId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGripperInfoAirChannel', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGroup(
        self,
        groupId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a group.

        Args:
            groupId (str): ID of the group to delete.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('groupId', 'String!', groupId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteIKParameterization(
        self,
        bodyId: str,
        environmentId: str,
        ikParamId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a ikparam in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParamId (str): ID of the ikparam to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParamId', 'String!', ikParamId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteInputOutputDeviceDescription(
        self,
        inputOutputDeviceDescriptionId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete an input/output device description.

        Args:
            inputOutputDeviceDescriptionId (str): ID of the input/output device description.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('inputOutputDeviceDescriptionId', 'String!', inputOutputDeviceDescriptionId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteInputOutputDeviceDescription', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteLink(
        self,
        bodyId: str,
        environmentId: str,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a top-level link in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            linkId (str): ID of the link to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteLinkAndJoint(
        self,
        bodyId: str,
        environmentId: str,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Delete a link and its joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            linkId (str): ID of the link to be deleted.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            DeleteLinkAndJointReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteLinkAndJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='DeleteLinkAndJointReturnValue', fields=fields, timeout=timeout)

    def DeleteModelProcessorProperties(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeletePositionConfiguration(
        self,
        bodyId: str,
        environmentId: str,
        positionConfigurationId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a position configuration in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfigurationId (str): ID of the position configuration to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeletePositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteProgram(
        self,
        programId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a program.

        Args:
            programId (str): ID of the program to be deleted.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('programId', 'String!', programId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteProgramReference(
        self,
        programId: str,
        referenceId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a program reference.

        Args:
            programId (str): ID of the program.
            referenceId (str): ID of the reference to be deleted.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('programId', 'String!', programId),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteReadable(
        self,
        bodyId: str,
        environmentId: str,
        readableId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete an existing readable interface in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            readableId (str): ID of the readable.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('readableId', 'String!', readableId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteReadable', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteRobotMotionParameters(
        self,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a robot motion parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteRole(
        self,
        roleId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a role.

        Args:
            roleId (str): ID of the role to delete.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteScheduleEvent(
        self,
        scheduleEventId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete an existing schedule event.

        Args:
            scheduleEventId (str): ID of the schedule event.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('scheduleEventId', 'String!', scheduleEventId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteScheduleEvent', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteTool(
        self,
        bodyId: str,
        environmentId: str,
        toolId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a tool from a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            toolId (str): ID of the tool to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('toolId', 'String!', toolId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteUser(
        self,
        userId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a user.

        Args:
            userId (str): ID of the user to delete.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('userId', 'String!', userId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteUser', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteWebApp(
        self,
        webAppId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete a web app.

        Args:
            webAppId (str): ID of the web app to delete.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('webAppId', 'String!', webAppId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteWebApp', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteWebAppConfiguration(
        self,
        webAppId: str,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Delete web app configuration.

        Args:
            webAppId (str): ID of the web app, for example "app-scene-editor".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('webAppId', 'String!', webAppId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteWebAppConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def ExtractBody(
        self,
        body: Any,
        bodyId: str,
        environment: Any,
        environmentId: str,
        replaceOriginalBody: Optional[bool] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Extract a body from an environment as a new single body environment.

        Args:
            body (BodyInput): Properties to be applied on the newly created body.
            bodyId (str): ID of the body to extract.
            environment (EnvironmentInput): Properties to be applied on the newly created environment.
            environmentId (str): ID of the environment.
            replaceOriginalBody (bool, optional): Replace original body with reference uri pointing to the newly created body.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('replaceOriginalBody', 'Boolean', replaceOriginalBody),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ExtractBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def ForceSyncNetworkTime(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Force sync network time.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='ForceSyncNetworkTime', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def ForceSynchronizerPullFromRemotes(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Force the synchronizer to pull resources from remotes immediately based on WebStack configuration.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='ForceSynchronizerPullFromRemotes', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def ForceSynchronizerPushToRemotes(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Force the synchronizer to push resources from remotes immediately based on WebStack configuration.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='ForceSynchronizerPushToRemotes', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def GetLatestDetectionResultImages(
        self,
        options: Optional[Any] = None,
        parameters: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """Get latest detection result images with metadata.

        Args:
            options (VisionManagerOptionsInput, optional):
            parameters (Any, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [MujinImage]: Holds data related to a captured images.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('options', 'VisionManagerOptionsInput', options),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='GetLatestDetectionResultImages', parameterNameTypeValues=parameterNameTypeValues, returnType='MujinImage', fields=fields, timeout=timeout)

    def Halt(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Power off controller.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='Halt', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def IdentifyNetworkInterface(
        self,
        label: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Blink the LED on the LAN port.

        Args:
            label (str, optional): Interface label, omit to stop blinking.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('label', 'String', label),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='IdentifyNetworkInterface', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def Login(
        self,
        username: str,
        password: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Returns a JWT token for the given username and password.

        Args:
            username (str): User username.
            password (str, optional): User password.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            LoginReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('username', 'String!', username),
            ('password', 'String', password),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='Login', parameterNameTypeValues=parameterNameTypeValues, returnType='LoginReturnValue', fields=fields, timeout=timeout)

    def MergeApplicationConfiguration(
        self,
        content: Any,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Merge changes into a particular application configuration.

        Args:
            content (Any): Untyped content to merge into the configuration.
            relativeConfigurationId (str): ID of the configuration, for example "controllersystem.conf".
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Configuration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('content', 'Any!', content),
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Configuration', fields=fields, timeout=timeout)

    def MergeConfiguration(
        self,
        configurationId: str,
        content: Any,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Merge changes into a particular configuration.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            content (Any): Untyped content to merge into the configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Configuration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('content', 'Any!', content),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Configuration', fields=fields, timeout=timeout)

    def MergeControllerSystemConfiguration(
        self,
        controllerSystemConfiguration: Any,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Update configuration by merging a partial configuration into it.

        Args:
            controllerSystemConfiguration (ControllerSystemConfigurationInput): Partial configuration to be merged into existing configuration.
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ControllerSystemConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('controllerSystemConfiguration', 'ControllerSystemConfigurationInput!', controllerSystemConfiguration),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeControllerSystemConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='ControllerSystemConfiguration', fields=fields, timeout=timeout)

    def MergeEnvironment(
        self,
        environment: Any,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Merge partial environment to an existing environment.

        Args:
            environment (EnvironmentInput): Properties to be merged on the existing environment.
            environmentId (str): ID of the environment to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def MergeEnvironments(
        self,
        environmentIds: List[str],
        environments: List[Any],
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """Merge partial environments to existing environments.

        Args:
            environmentIds ([String]): IDs of the environments to modify.
            environments ([EnvironmentInput]): Properties to be merged on the existing environments.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [Environment]: An OpenRAVE Environment
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environmentIds', '[String!]!', environmentIds),
            ('environments', '[EnvironmentInput!]!', environments),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def MergeOrchestratorMasterConfiguration(
        self,
        orchestratorMasterConfiguration: Any,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Update configuration by merging a partial configuration into it.

        Args:
            orchestratorMasterConfiguration (OrchestratorMasterConfigurationInput): Partial configuration to be merged into existing configuration.
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            OrchestratorMasterConfiguration: Orchestrator master configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorMasterConfiguration', 'OrchestratorMasterConfigurationInput!', orchestratorMasterConfiguration),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeOrchestratorMasterConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='OrchestratorMasterConfiguration', fields=fields, timeout=timeout)

    def MergeProgramFilesAtReference(
        self,
        files: List[Any],
        programId: str,
        referenceId: str,
        commitOptions: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """Merge changes to files into a program at a particular reference.

        Args:
            files ([ProgramFileInput]): List of files to be merged into the program at specified reference.
            programId (str): ID of the program.
            referenceId (str): ID of the program reference, "refs/heads/my-branch" for example.
            commitOptions (CommitOptionsInput, optional): Commit options.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [ProgramFile]:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('files', '[ProgramFileInput!]!', files),
            ('programId', 'String!', programId),
            ('referenceId', 'String!', referenceId),
            ('commitOptions', 'CommitOptionsInput', commitOptions),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeProgramFilesAtReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramFile', fields=fields, timeout=timeout)

    def MergeRobotBridgesConfiguration(
        self,
        robotBridgesConfiguration: Any,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Update configuration by merging a partial configuration into it.

        Args:
            robotBridgesConfiguration (RobotBridgesConfigurationInput): Partial configuration to be merged into existing configuration.
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotBridgesConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('robotBridgesConfiguration', 'RobotBridgesConfigurationInput!', robotBridgesConfiguration),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeRobotBridgesConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotBridgesConfiguration', fields=fields, timeout=timeout)

    def MergeSensorBridgesConfiguration(
        self,
        sensorBridgesConfiguration: Any,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Update configuration by merging a partial configuration into it.

        Args:
            sensorBridgesConfiguration (SensorBridgesConfigurationInput): Partial configuration to be merged into existing configuration.
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SensorBridgesConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('sensorBridgesConfiguration', 'SensorBridgesConfigurationInput!', sensorBridgesConfiguration),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeSensorBridgesConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SensorBridgesConfiguration', fields=fields, timeout=timeout)

    def MergeSignalMapConfiguration(
        self,
        relativeConfigurationId: str,
        signalMapConfiguration: Any,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Update signal map by merging a partial signal map into it.

        Args:
            relativeConfigurationId (str): ID of the signal map, for example "signalmaps/custom.signalmap".
            signalMapConfiguration (SignalMapConfigurationInput): Partial configuration to be merged into existing configuration.
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SignalMapConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('signalMapConfiguration', 'SignalMapConfigurationInput!', signalMapConfiguration),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeSignalMapConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SignalMapConfiguration', fields=fields, timeout=timeout)

    def MergeSystemConfiguration(
        self,
        systemConfiguration: Any,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Update system configuration by merging a partial configuration into it.

        Args:
            systemConfiguration (SystemConfigurationInput): Partial configuration to be merged into existing system configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SystemConfiguration:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('systemConfiguration', 'SystemConfigurationInput!', systemConfiguration),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeSystemConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SystemConfiguration', fields=fields, timeout=timeout)

    def MergeUntypedApplicationConfiguration(
        self,
        content: Any,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Merge changes into a particular application configuration without typing.

        Args:
            content (Any): Untyped content to merge into the configuration.
            relativeConfigurationId (str): ID of the configuration, for example "controllersystem.conf".
            applicationId (str, optional): ID of the application.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('content', 'Any!', content),
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeUntypedApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def MergeUntypedConfiguration(
        self,
        configurationId: str,
        content: Any,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Merge changes into a particular configuration without typing.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            content (Any): Untyped content to merge into the configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('content', 'Any!', content),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeUntypedConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def MergeUntypedWebAppConfiguration(
        self,
        content: Any,
        webAppId: str,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Merge changes into web app configuration without typing.

        Args:
            content (Any): Untyped content to merge into the configuration.
            webAppId (str): ID of the web app, for example "app-scene-editor".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('content', 'Any!', content),
            ('webAppId', 'String!', webAppId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeUntypedWebAppConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def MergeWebStackConfiguration(
        self,
        webStackConfiguration: Any,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Update configuration by merging a partial configuration into it.

        Args:
            webStackConfiguration (WebStackConfigurationInput): Partial configuration to be merged into existing configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            WebStackConfiguration: WebStack specific configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('webStackConfiguration', 'WebStackConfigurationInput!', webStackConfiguration),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeWebStackConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='WebStackConfiguration', fields=fields, timeout=timeout)

    def ModifyAppearanceParameters(
        self,
        appearanceParameters: Any,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing appearance parameters in a body.

        Args:
            appearanceParameters (AppearanceParametersInput): Properties to be modified on the appearance parameters.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AppearanceParameters: A set of parameters that vision detector uses.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('appearanceParameters', 'AppearanceParametersInput!', appearanceParameters),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='AppearanceParameters', fields=fields, timeout=timeout)

    def ModifyAttachedSensor(
        self,
        attachedSensor: Any,
        attachedSensorId: str,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing attached sensor on a robot.

        Args:
            attachedSensor (AttachedSensorInput): Properties to modify on the attached sensor.
            attachedSensorId (str): ID of the attached sensor to modify.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def ModifyBody(
        self,
        body: Any,
        bodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing body in an environment.

        Args:
            body (BodyInput): Properties to be modified on the body.
            bodyId (str): ID of the body to modify.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def ModifyBodyParameters(
        self,
        bodyId: str,
        bodyParameters: Any,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing body parameters in a body.

        Args:
            bodyId (str): ID of the body.
            bodyParameters (BodyParametersInput): Properties to be modified on the body parameters.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            BodyParameters: Parameters of an OpenRAVE 'Body'
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('bodyParameters', 'BodyParametersInput!', bodyParameters),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def ModifyConnectedBody(
        self,
        bodyId: str,
        connectedBody: Any,
        connectedBodyId: str,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing connected body on a robot.

        Args:
            bodyId (str): ID of the body.
            connectedBody (ConnectedBodyInput): Properties to modify on the connected body.
            connectedBodyId (str): ID of the connected body to modify.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def ModifyElectronicDataSheet(
        self,
        electronicDataSheet: Any,
        electronicDataSheetId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing electronic data sheet.

        Args:
            electronicDataSheet (ElectronicDataSheetInput): Properties to be modified on the existing electronic data sheet.
            electronicDataSheetId (str): ID of the electronic data sheet to modify.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ElectronicDataSheet: An EDS (Electronic Data Sheet) used for network configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('electronicDataSheet', 'ElectronicDataSheetInput!', electronicDataSheet),
            ('electronicDataSheetId', 'String!', electronicDataSheetId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyElectronicDataSheet', parameterNameTypeValues=parameterNameTypeValues, returnType='ElectronicDataSheet', fields=fields, timeout=timeout)

    def ModifyEnvironment(
        self,
        environment: Any,
        environmentId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing environment.

        Args:
            environment (EnvironmentInput): Properties to be modified on the existing environment.
            environmentId (str): ID of the environment to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def ModifyEtherCATSubDeviceInformation(
        self,
        etherCatSubDeviceInformation: Any,
        etherCatSubDeviceInformationId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing ethercat sub-device information.

        Args:
            etherCatSubDeviceInformation (EtherCATSubDeviceInformationInput): Properties to be modified on the existing ethercat sub-device information.
            etherCatSubDeviceInformationId (str): ID of the ethercat sub-device information to modify.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            EtherCATSubDeviceInformation: An ESI (EtherCAT SubDevice Information) used for network configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('etherCatSubDeviceInformation', 'EtherCATSubDeviceInformationInput!', etherCatSubDeviceInformation),
            ('etherCatSubDeviceInformationId', 'String!', etherCatSubDeviceInformationId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyEtherCATSubDeviceInformation', parameterNameTypeValues=parameterNameTypeValues, returnType='EtherCATSubDeviceInformation', fields=fields, timeout=timeout)

    def ModifyFeedbackHistory(
        self,
        bodyId: str,
        environmentId: str,
        feedbackHistory: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing feedback history in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            feedbackHistory (FeedbackHistoryInput): Properties to be modified on the feedback history.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            FeedbackHistory: The history of feedback from robotic system such as measured mass, final status of pick (success/piecelost etc.), options that were used for chucking etc.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('feedbackHistory', 'FeedbackHistoryInput!', feedbackHistory),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyFeedbackHistory', parameterNameTypeValues=parameterNameTypeValues, returnType='FeedbackHistory', fields=fields, timeout=timeout)

    def ModifyGeometry(
        self,
        bodyId: str,
        environmentId: str,
        geometry: Any,
        geometryId: str,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing geometry in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometry (GeometryInput): Properties to be modified on the geometry.
            geometryId (str): ID of the geometry to modify.
            linkId (str): ID of the link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def ModifyGrabbed(
        self,
        bodyId: str,
        environmentId: str,
        grabbed: Any,
        grabbedId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing grabbed object in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbed (GrabbedInput): Properties to be modified on the grabbed object.
            grabbedId (str): ID of the grabbed object to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('grabbedId', 'String!', grabbedId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def ModifyGraspSet(
        self,
        bodyId: str,
        environmentId: str,
        graspSet: Any,
        graspSetId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing grasp set in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSet (GraspSetInput): Properties to be modified on the grasp set.
            graspSetId (str): ID of the grasp set to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('graspSetId', 'String!', graspSetId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def ModifyGripperInfo(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfo: Any,
        gripperInfoId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing gripper info on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfo (GripperInfoInput): Properties to modify on the gripper info.
            gripperInfoId (str): ID of the gripper info to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def ModifyGripperInfoAirChannel(
        self,
        bodyId: str,
        environmentId: str,
        gripperInfoAirChannel: Any,
        gripperInfoAirChannelId: str,
        gripperInfoId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing air channel on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoAirChannel (GripperInfoAirChannelInput): Properties to modify on the air channel.
            gripperInfoAirChannelId (str): ID of the air channel to modify.
            gripperInfoId (str): ID of the gripper info
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfoAirChannel: The information about each air channel.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoAirChannel', 'GripperInfoAirChannelInput!', gripperInfoAirChannel),
            ('gripperInfoAirChannelId', 'String!', gripperInfoAirChannelId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGripperInfoAirChannel', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfoAirChannel', fields=fields, timeout=timeout)

    def ModifyGroup(
        self,
        group: Any,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing group.

        Args:
            group (GroupInput): Properties to be applied on the modified group.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Group: Group of multiple User, a User can belong to multiple Group.
                    A User must belong to a Group to receive Role assignment.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('group', 'GroupInput!', group),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Group', fields=fields, timeout=timeout)

    def ModifyIKParameterization(
        self,
        bodyId: str,
        environmentId: str,
        ikParam: Any,
        ikParamId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing ikparam in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParam (IKParameterizationInput): Properties to be modified on the ikparam.
            ikParamId (str): ID of the ikparam to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameterization describes a pose in space. Includes additional parameters that can affect grasping (e.g. Direction, Angle).
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('ikParamId', 'String!', ikParamId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def ModifyInputOutputDeviceDescription(
        self,
        inputOutputDeviceDescription: Any,
        inputOutputDeviceDescriptionId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing input/output device description.

        Args:
            inputOutputDeviceDescription (InputOutputDeviceDescriptionInput): Properties to be modified on the existing input/output device description.
            inputOutputDeviceDescriptionId (str): ID of the input/output device description to modify.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            InputOutputDeviceDescription: An IODD (Input/Output Device Description) used for network configuration.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('inputOutputDeviceDescription', 'InputOutputDeviceDescriptionInput!', inputOutputDeviceDescription),
            ('inputOutputDeviceDescriptionId', 'String!', inputOutputDeviceDescriptionId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyInputOutputDeviceDescription', parameterNameTypeValues=parameterNameTypeValues, returnType='InputOutputDeviceDescription', fields=fields, timeout=timeout)

    def ModifyJoint(
        self,
        bodyId: str,
        environmentId: str,
        joint: Any,
        jointId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            joint (JointInput): Properties to be modified on the joint.
            jointId (str): ID of the joint to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('jointId', 'String!', jointId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def ModifyLink(
        self,
        bodyId: str,
        environmentId: str,
        link: Any,
        linkId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing link in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            link (LinkInput): Properties to be modified on the link.
            linkId (str): ID of the link to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def ModifyModelProcessorProperties(
        self,
        bodyId: str,
        environmentId: str,
        modelProcessorProperties: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            modelProcessorProperties (ModelProcessorPropertiesInput): Properties to be modified on the model processor properties.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorProperties: A set of values related to the latest model processing state
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('modelProcessorProperties', 'ModelProcessorPropertiesInput!', modelProcessorProperties),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorProperties', fields=fields, timeout=timeout)

    def ModifyPositionConfiguration(
        self,
        bodyId: str,
        environmentId: str,
        positionConfiguration: Any,
        positionConfigurationId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing position configuration in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfiguration (PositionConfigurationInput): Properties to be modified on the position configuration.
            positionConfigurationId (str): ID of the position configuration to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def ModifyProgram(
        self,
        program: Any,
        programId: str,
        commitOptions: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify a program.

        Args:
            program (ProgramInput): Properties to be modified on the program.
            programId (str): ID of the program to modify.
            commitOptions (CommitOptionsInput, optional): Commit options.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Program: ITL program.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('program', 'ProgramInput!', program),
            ('programId', 'String!', programId),
            ('commitOptions', 'CommitOptionsInput', commitOptions),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Program', fields=fields, timeout=timeout)

    def ModifyProgramReference(
        self,
        programId: str,
        reference: Any,
        referenceId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify a program reference.

        Args:
            programId (str): ID of the program.
            reference (ProgramReferenceInput): Properties to be applied on the program.
            referenceId (str): ID of the reference to be modified.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramReference: A named reference pointing to a commit object.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('programId', 'String!', programId),
            ('reference', 'ProgramReferenceInput!', reference),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramReference', fields=fields, timeout=timeout)

    def ModifyReferenceObjectPKs(
        self,
        bodyId: str,
        environmentId: str,
        addDisabledReferenceObjectPks: Optional[List[str]] = None,
        addReferenceObjectPks: Optional[List[str]] = None,
        removeDisabledReferenceObjectPks: Optional[List[str]] = None,
        removeReferenceObjectPks: Optional[List[str]] = None,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify reference object pks in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            addDisabledReferenceObjectPks ([String], optional): A list of reference object pks to add to the disable list.
            addReferenceObjectPks ([String], optional): A list of reference object pks to add.
            removeDisabledReferenceObjectPks ([String], optional): A list of reference object pks to remove from the disable list.
            removeReferenceObjectPks ([String], optional): A list of reference object pks to remove.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModifyReferenceObjectPKsReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('addDisabledReferenceObjectPks', '[String!]', addDisabledReferenceObjectPks),
            ('addReferenceObjectPks', '[String!]', addReferenceObjectPks),
            ('removeDisabledReferenceObjectPks', '[String!]', removeDisabledReferenceObjectPks),
            ('removeReferenceObjectPks', '[String!]', removeReferenceObjectPks),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyReferenceObjectPKs', parameterNameTypeValues=parameterNameTypeValues, returnType='ModifyReferenceObjectPKsReturnValue', fields=fields, timeout=timeout)

    def ModifyRobotMotionParameters(
        self,
        bodyId: str,
        environmentId: str,
        robotMotionParameters: Any,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing robot motion parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            robotMotionParameters (RobotMotionParametersInput): Properties to be modified on the robot motion parameters.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('robotMotionParameters', 'RobotMotionParametersInput!', robotMotionParameters),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def ModifyRole(
        self,
        role: Any,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing role.

        Args:
            role (RoleInput): Properties to be applied on the modified role.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Role: Each Group can have zero or more Role assigned.
                    A Role can be assigned to multiple Group.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('role', 'RoleInput!', role),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Role', fields=fields, timeout=timeout)

    def ModifyScheduleEvent(
        self,
        scheduleEvent: Any,
        scheduleEventId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing schedule event.

        Args:
            scheduleEvent (ScheduleEventInput): Properties to be modified on the schedule event.
            scheduleEventId (str): ID of the schedule event.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ScheduleEvent:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('scheduleEvent', 'ScheduleEventInput!', scheduleEvent),
            ('scheduleEventId', 'String!', scheduleEventId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyScheduleEvent', parameterNameTypeValues=parameterNameTypeValues, returnType='ScheduleEvent', fields=fields, timeout=timeout)

    def ModifyTool(
        self,
        bodyId: str,
        environmentId: str,
        tool: Any,
        toolId: str,
        resolveReferences: Optional[bool] = None,
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing tool on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            tool (ToolInput): Properties to modify on the tool.
            toolId (str): ID of the tool to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('toolId', 'String!', toolId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def ModifyUser(
        self,
        user: Any,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Modify an existing user.

        Args:
            user (UserInput): Properties to be applied on the modified user.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            User: Represents one identity, such as “John Doe”.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('user', 'UserInput!', user),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyUser', parameterNameTypeValues=parameterNameTypeValues, returnType='User', fields=fields, timeout=timeout)

    def PurgeUnusedRuntimeImages(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Purge unused runtime images

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='PurgeUnusedRuntimeImages', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def Reboot(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Reboot controller.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='Reboot', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemoveDiskDriveFromDiskArray(
        self,
        diskArray: str,
        diskDrive: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Remove a disk drive from a disk array.

        Args:
            diskArray (str): Array name, e.g. "/dev/md0".
            diskDrive (str): Drive name, e.g. "/dev/sda".
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('diskArray', 'String!', diskArray),
            ('diskDrive', 'String!', diskDrive),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemoveDiskDriveFromDiskArray', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemovePendant(
        self,
        address: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Remove a pendant from the system.

        Args:
            address (str): Pendant address.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('address', 'String!', address),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemovePendant', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemovePermissionFromRole(
        self,
        permission: Any,
        roleId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Remove a permission from a group.

        Args:
            permission (PermissionInput): Permission properties.
            roleId (str): ID of the role to remove from.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('permission', 'PermissionInput!', permission),
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemovePermissionFromRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemoveRoleFromGroup(
        self,
        groupId: str,
        roleId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Remove a role from a group.

        Args:
            groupId (str): ID of the group to remove from.
            roleId (str): ID of the role to remove.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('groupId', 'String!', groupId),
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemoveRoleFromGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemoveRuntimeImage(
        self,
        imageId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Remove an runtime image, if it is not in use.

        Args:
            imageId (str): ID of the runtime image to remove.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('imageId', 'String!', imageId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemoveRuntimeImage', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemoveUserFromGroup(
        self,
        groupId: str,
        userId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Remove a user from a group.

        Args:
            groupId (str): ID of the group to remove from.
            userId (str): ID of the user to remove.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('groupId', 'String!', groupId),
            ('userId', 'String!', userId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemoveUserFromGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemoveUserPassword(
        self,
        userId: str,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Remove a user's password.

        Args:
            userId (str): ID of the user to remove password.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('userId', 'String!', userId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemoveUserPassword', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RestartPlanningServer(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Send command to restart planning server.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='RestartPlanningServer', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RestartRuntimeContainer(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Restart current runtime container.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='RestartRuntimeContainer', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def ScanWirelessNetwork(
        self,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Trigger scanning of wireless network. The scanned result will appear in hypervisor status.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSimpleGraphAPI('mutation', operationName='ScanWirelessNetwork', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def SetPendantBuzzerOn(
        self,
        address: Optional[str] = None,
        on: Optional[bool] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Turn on/off pendant buzzer.

        Args:
            address (str, optional): Pendant address.
            on (bool, optional): Whether to turn buzzer on or off (true by default).
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('address', 'String', address),
            ('on', 'Boolean', on),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetPendantBuzzerOn', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def SetPendantDisplayBrightness(
        self,
        address: Optional[str] = None,
        displayBrightness: Optional[int] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Set pendant display brightness.

        Args:
            address (str, optional): Pendant address.
            displayBrightness (int, optional): Pendant display brightness (0-255).
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('address', 'String', address),
            ('displayBrightness', 'Int', displayBrightness),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetPendantDisplayBrightness', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def SetPendantDisplayOn(
        self,
        address: Optional[str] = None,
        on: Optional[bool] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Turn on/off pendant display.

        Args:
            address (str, optional): Pendant address.
            on (bool, optional): Whether to turn display on or off (true by default).
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('address', 'String', address),
            ('on', 'Boolean', on),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetPendantDisplayOn', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def SetPendantDisplayTTY(
        self,
        displayTty: int,
        address: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Set pendant display's TTY.

        Args:
            displayTty (int): The number of the display tty to show (0-65535).
            address (str, optional): Pendant address.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('displayTty', 'Int!', displayTty),
            ('address', 'String', address),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetPendantDisplayTTY', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def SetPendantTouchscreenModes(
        self,
        gloveMode: bool,
        singleTouchMode: bool,
        address: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Set pendant touchscreen modes.

        Args:
            gloveMode (bool): Enables touchscreen glove mode if true and finger mode if false.
            singleTouchMode (bool): Enables touchscreen single touch mode if true and multi touch mode if false.
            address (str, optional): Pendant address.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('gloveMode', 'Boolean!', gloveMode),
            ('singleTouchMode', 'Boolean!', singleTouchMode),
            ('address', 'String', address),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetPendantTouchscreenModes', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def SetUntypedApplicationConfiguration(
        self,
        content: Any,
        relativeConfigurationId: str,
        applicationId: Optional[str] = None,
        ifUnmodifiedSinceModifiedAt: Optional[Any] = None,
        resolveReferences: bool = True,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Set a particular application configuration without typing.

        Args:
            content (Any): Untyped content to replace the configuration with.
            relativeConfigurationId (str): ID of the configuration, for example "controllersystem.conf".
            applicationId (str, optional): ID of the application.
            ifUnmodifiedSinceModifiedAt (DateTime, optional): If supplied, will return null unless modified after this timestamp.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return resolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('content', 'Any!', content),
            ('relativeConfigurationId', 'String!', relativeConfigurationId),
            ('applicationId', 'String', applicationId),
            ('ifUnmodifiedSinceModifiedAt', 'DateTime', ifUnmodifiedSinceModifiedAt),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetUntypedApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def SetUntypedConfiguration(
        self,
        configurationId: str,
        content: Any,
        ifUnmodifiedSinceModifiedAt: Optional[Any] = None,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Set a particular configuration without typing.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            content (Any): Untyped content to replace the configuration with.
            ifUnmodifiedSinceModifiedAt (DateTime, optional): If supplied, will return null unless modified after this timestamp.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationId', 'String!', configurationId),
            ('content', 'Any!', content),
            ('ifUnmodifiedSinceModifiedAt', 'DateTime', ifUnmodifiedSinceModifiedAt),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetUntypedConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def SetUntypedWebAppConfiguration(
        self,
        content: Any,
        webAppId: str,
        resolveReferences: bool = False,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Optional[Any]:
        """Set web app configuration without typing.

        Args:
            content (Any): Untyped content to replace the configuration with.
            webAppId (str): ID of the web app, for example "app-scene-editor".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('content', 'Any!', content),
            ('webAppId', 'String!', webAppId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetUntypedWebAppConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def SnapImages(
        self,
        parameters: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> List[Any]:
        """Snap images using sensorbridges and return image metadata.

        Args:
            parameters (Any, optional):
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [MujinImage]: Holds data related to a captured images.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SnapImages', parameterNameTypeValues=parameterNameTypeValues, returnType='MujinImage', fields=fields, timeout=timeout)

    def SyncConfigurationsFromRemote(
        self,
        configurationIds: List[str],
        remoteUrl: str,
        ignoreDownloadFailures: Optional[bool] = None,
        remotePassword: Optional[str] = None,
        remoteUsername: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Sync configurations from remote webstack.

        Args:
            configurationIds ([String]): List of configuration IDs to download.
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            ignoreDownloadFailures (bool, optional): If set to true, ignores download failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncConfigurationsFromRemoteReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationIds', '[String!]!', configurationIds),
            ('remoteUrl', 'String!', remoteUrl),
            ('ignoreDownloadFailures', 'Boolean', ignoreDownloadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncConfigurationsFromRemote', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncConfigurationsFromRemoteReturnValue', fields=fields, timeout=timeout)

    def SyncConfigurationsToRemote(
        self,
        configurationIds: List[str],
        remoteUrl: str,
        ignoreUploadFailures: Optional[bool] = None,
        remotePassword: Optional[str] = None,
        remoteUsername: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Sync configurations to remote webstack.

        Args:
            configurationIds ([String]): List of configuration IDs to upload.
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            ignoreUploadFailures (bool, optional): If set to true, ignores download failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncConfigurationsToRemoteReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('configurationIds', '[String!]!', configurationIds),
            ('remoteUrl', 'String!', remoteUrl),
            ('ignoreUploadFailures', 'Boolean', ignoreUploadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncConfigurationsToRemote', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncConfigurationsToRemoteReturnValue', fields=fields, timeout=timeout)

    def SyncEnvironments(
        self,
        remoteUrl: str,
        addKeywords: Optional[List[str]] = None,
        downloadReferenceObjects: Optional[bool] = None,
        dynamicEnvironments: Optional[List[Any]] = None,
        environmentIds: Optional[List[str]] = None,
        fileNamePatterns: Optional[List[str]] = None,
        ignoreDownloadFailures: Optional[bool] = None,
        remotePassword: Optional[str] = None,
        remoteUsername: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Sync environments from remote webstack.

        Deprecated:
            Use `SyncEnvironmentsFromRemote` instead.

        Args:
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            addKeywords ([String], optional): If set, add keywords to the modified environments.
            downloadReferenceObjects (bool, optional): If set to true, download objects referenced in bodies.
            dynamicEnvironments ([EnvironmentInput], optional): List of dynamic environments to download extract referenced environment IDs from.
            environmentIds ([String], optional): List of environment IDs to download.
            fileNamePatterns ([String], optional): List of regular expression patterns to determine what files to sync inside each environment.
            ignoreDownloadFailures (bool, optional): If set to true, ignores download failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncEnvironmentsFromRemoteReturnValue:
        """
        warnings.warn('"SyncEnvironments" is deprecated. Use `SyncEnvironmentsFromRemote` instead.', DeprecationWarning, stacklevel=2)
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('remoteUrl', 'String!', remoteUrl),
            ('addKeywords', '[String!]', addKeywords),
            ('downloadReferenceObjects', 'Boolean', downloadReferenceObjects),
            ('dynamicEnvironments', '[EnvironmentInput!]', dynamicEnvironments),
            ('environmentIds', '[String!]', environmentIds),
            ('fileNamePatterns', '[String!]', fileNamePatterns),
            ('ignoreDownloadFailures', 'Boolean', ignoreDownloadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncEnvironmentsFromRemoteReturnValue', fields=fields, timeout=timeout)

    def SyncEnvironmentsFromRemote(
        self,
        remoteUrl: str,
        addKeywords: Optional[List[str]] = None,
        downloadReferenceObjects: Optional[bool] = None,
        dynamicEnvironments: Optional[List[Any]] = None,
        environmentIds: Optional[List[str]] = None,
        fileNamePatterns: Optional[List[str]] = None,
        ignoreDownloadFailures: Optional[bool] = None,
        remotePassword: Optional[str] = None,
        remoteUsername: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Sync environments from remote webstack.

        Args:
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            addKeywords ([String], optional): If set, add keywords to the modified environments.
            downloadReferenceObjects (bool, optional): If set to true, download objects referenced in bodies.
            dynamicEnvironments ([EnvironmentInput], optional): List of dynamic environments to download extract referenced environment IDs from.
            environmentIds ([String], optional): List of environment IDs to download.
            fileNamePatterns ([String], optional): List of regular expression patterns to determine what files to sync inside each environment.
            ignoreDownloadFailures (bool, optional): If set to true, ignores download failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncEnvironmentsFromRemoteReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('remoteUrl', 'String!', remoteUrl),
            ('addKeywords', '[String!]', addKeywords),
            ('downloadReferenceObjects', 'Boolean', downloadReferenceObjects),
            ('dynamicEnvironments', '[EnvironmentInput!]', dynamicEnvironments),
            ('environmentIds', '[String!]', environmentIds),
            ('fileNamePatterns', '[String!]', fileNamePatterns),
            ('ignoreDownloadFailures', 'Boolean', ignoreDownloadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncEnvironmentsFromRemote', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncEnvironmentsFromRemoteReturnValue', fields=fields, timeout=timeout)

    def SyncEnvironmentsToRemote(
        self,
        remoteUrl: str,
        addKeywords: Optional[List[str]] = None,
        dynamicEnvironments: Optional[List[Any]] = None,
        environmentIds: Optional[List[str]] = None,
        fileNamePatterns: Optional[List[str]] = None,
        ignoreUploadFailures: Optional[bool] = None,
        remotePassword: Optional[str] = None,
        remoteUsername: Optional[str] = None,
        uploadReferenceObjects: Optional[bool] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> Any:
        """Sync environments to remote webstack.

        Args:
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            addKeywords ([String], optional): If set, add keywords to the modified environments.
            dynamicEnvironments ([EnvironmentInput], optional): List of dynamic environments to download extract referenced environment IDs from.
            environmentIds ([String], optional): List of environment IDs to upload.
            fileNamePatterns ([String], optional): List of regular expression patterns to determine what files to sync inside each environment.
            ignoreUploadFailures (bool, optional): If set to true, ignores upload failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            uploadReferenceObjects (bool, optional): If set to true, upload objects referenced in bodies.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncEnvironmentsToRemoteReturnValue:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('remoteUrl', 'String!', remoteUrl),
            ('addKeywords', '[String!]', addKeywords),
            ('dynamicEnvironments', '[EnvironmentInput!]', dynamicEnvironments),
            ('environmentIds', '[String!]', environmentIds),
            ('fileNamePatterns', '[String!]', fileNamePatterns),
            ('ignoreUploadFailures', 'Boolean', ignoreUploadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
            ('uploadReferenceObjects', 'Boolean', uploadReferenceObjects),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncEnvironmentsToRemote', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncEnvironmentsToRemoteReturnValue', fields=fields, timeout=timeout)

    def Upgrade(
        self,
        autoRestartRuntimeContainer: Optional[bool] = None,
        purgeUnusedRuntimeImages: Optional[bool] = None,
        url: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
        timeout: Optional[float] = None,
    ) -> None:
        """Upgrade controller with upgrade image.

        Args:
            autoRestartRuntimeContainer (bool, optional): Whether to auto restart runtime container after upgrade.
            purgeUnusedRuntimeImages (bool, optional): Whether to purge unused runtime images to make room for upgrade.
            url (str, optional): URL to download upgrade image from.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('autoRestartRuntimeContainer', 'Boolean', autoRestartRuntimeContainer),
            ('purgeUnusedRuntimeImages', 'Boolean', purgeUnusedRuntimeImages),
            ('url', 'String', url),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='Upgrade', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)


class GraphSubscriptions:
    def Unsubscribe(self, subscription: Subscription) -> None:
        """
        Cancel an actively running subscription instance.

        Args:
            subscription (Subscription): The subscription instance to cancel.
        """
        self._webclient.UnsubscribeGraphAPI(subscription)

    def SubscribeApplicationConfigurationChange(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        applicationId: Optional[str] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            applicationId (str, optional): ID of the application.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            ConfigurationChange:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('applicationId', 'String', applicationId),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeApplicationConfigurationChange', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigurationChange', callbackFunction=callbackFunction, fields=fields)

    def SubscribeBaseSystemOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            BaseSystemOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeBaseSystemOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='BaseSystemOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeCalibrationOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            CalibrationOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeCalibrationOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='CalibrationOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeCameraCalibrationOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            CalibrationOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeCameraCalibrationOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='CalibrationOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeConfigurationChange(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            ConfigurationChange:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = []
        return self._CallSubscribeGraphAPI(operationName='SubscribeConfigurationChange', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigurationChange', callbackFunction=callbackFunction, fields=fields)

    def SubscribeDiscoveredDevices(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interfaceLabels: List[str],
        deviceTypes: Optional[List[str]] = None,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """Subscribe to the devices discovered on an interface.

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interfaceLabels ([String]): The LAN labels to be used, e.g. ["LAN1", "LAN2"].
            deviceTypes ([String], optional): The device types to be used. Leave empty for selecting all device types.
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            NetProbeState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interfaceLabels', '[String!]!', interfaceLabels),
            ('deviceTypes', '[String!]', deviceTypes),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeDiscoveredDevices', parameterNameTypeValues=parameterNameTypeValues, returnType='NetProbeState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeEnvironmentChange(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            EnvironmentChange:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeEnvironmentChange', parameterNameTypeValues=parameterNameTypeValues, returnType='EnvironmentChange', callbackFunction=callbackFunction, fields=fields)

    def SubscribeFleetOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            FleetOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeFleetOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='FleetOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeLogEntryChange(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        logTypes: Optional[List[Any]] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """Subscribe to log entry changes.

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            logTypes ([LogType], optional): Filter by log entry type.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            LogEntryChange:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('logTypes', '[LogType!]', logTypes),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeLogEntryChange', parameterNameTypeValues=parameterNameTypeValues, returnType='LogEntryChange', callbackFunction=callbackFunction, fields=fields)

    def SubscribeOrchestratorMasterState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            OrchestratorMasterState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeOrchestratorMasterState', parameterNameTypeValues=parameterNameTypeValues, returnType='OrchestratorMasterState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeOrderCycleOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            OrderCycleOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeOrderCycleOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='OrderCycleOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribePackingClusterOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribePackingClusterOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', callbackFunction=callbackFunction, fields=fields)

    def SubscribePackingOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            SubscribePackingOrchestratorStateReturns:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribePackingOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='SubscribePackingOrchestratorStateReturns', callbackFunction=callbackFunction, fields=fields)

    def SubscribePendantServerState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            PendantServerState: Pendant server state
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribePendantServerState', parameterNameTypeValues=parameterNameTypeValues, returnType='PendantServerState', callbackFunction=callbackFunction, fields=fields)

    def SubscribePlanningServerState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            PlanningServerState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribePlanningServerState', parameterNameTypeValues=parameterNameTypeValues, returnType='PlanningServerState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeProductionCycleOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            ProductionCycleOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeProductionCycleOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='ProductionCycleOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeProgramLogLines(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        executionId: str,
        programId: str,
        interval: Optional[str] = None,
        tail: Optional[int] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """Subscribe to program log lines.

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            executionId (str): ID of the execution.
            programId (str): ID of the program.
            interval (str, optional): Polling interval, for example "2s" or "200ms".
                    If not specified, 500ms is used.
            tail (int, optional): Number of lines to retrieve from the end of the logs.
                    If not specified, only subscribe to new lines.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            [String]: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('executionId', 'String!', executionId),
            ('programId', 'String!', programId),
            ('interval', 'String', interval),
            ('tail', 'Int', tail),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeProgramLogLines', parameterNameTypeValues=parameterNameTypeValues, returnType='String', callbackFunction=callbackFunction, fields=fields)

    def SubscribeRegistrationOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            RegistrationOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeRegistrationOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='RegistrationOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeRobotBridgesEnvironment(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """Subscribe to the main environment in robotbridges. Upon subscription start, the currently tracked environment will be sent immediately.

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeRobotBridgesEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', callbackFunction=callbackFunction, fields=fields)

    def SubscribeRobotBridgesState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            RobotBridgesState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeRobotBridgesState', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotBridgesState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeRobotMotorControlOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            RobotMotorControlOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeRobotMotorControlOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotorControlOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeSensorBridgesState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            SensorBridgesState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeSensorBridgesState', parameterNameTypeValues=parameterNameTypeValues, returnType='SensorBridgesState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeTeachWorkerOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            TeachWorkerOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeTeachWorkerOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='TeachWorkerOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeUntypedOrchestratorMasterState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeUntypedOrchestratorMasterState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', callbackFunction=callbackFunction, fields=fields)

    def SubscribeUntypedPlanningServerState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeUntypedPlanningServerState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', callbackFunction=callbackFunction, fields=fields)

    def SubscribeUntypedRobotBridgesEnvironment(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """Subscribe to the main environment in robotbridges. Upon subscription start, the currently tracked environment will be sent immediately.

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeUntypedRobotBridgesEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', callbackFunction=callbackFunction, fields=fields)

    def SubscribeUntypedRobotBridgesState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeUntypedRobotBridgesState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', callbackFunction=callbackFunction, fields=fields)

    def SubscribeUntypedSensorBridgesState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeUntypedSensorBridgesState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', callbackFunction=callbackFunction, fields=fields)

    def SubscribeUntypedUserInterfaceState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeUntypedUserInterfaceState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', callbackFunction=callbackFunction, fields=fields)

    def SubscribeUntypedVisionManagerMasterState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            Any:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeUntypedVisionManagerMasterState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', callbackFunction=callbackFunction, fields=fields)

    def SubscribeUserInterfaceState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            UserInterfaceState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeUserInterfaceState', parameterNameTypeValues=parameterNameTypeValues, returnType='UserInterfaceState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeVisionManagerMasterState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        units: Optional[Any] = None,
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            SubscribeVisionManagerMasterStateReturns:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeVisionManagerMasterState', parameterNameTypeValues=parameterNameTypeValues, returnType='SubscribeVisionManagerMasterStateReturns', callbackFunction=callbackFunction, fields=fields)

    def SubscribeWarehouseExecutionOrchestratorState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        orchestratorId: str,
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            orchestratorId (str): ID of the orchestrator to subscribe to
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            WarehouseExecutionOrchestratorState:
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('orchestratorId', 'String!', orchestratorId),
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeWarehouseExecutionOrchestratorState', parameterNameTypeValues=parameterNameTypeValues, returnType='WarehouseExecutionOrchestratorState', callbackFunction=callbackFunction, fields=fields)

    def SubscribeWebStackState(
        self,
        callbackFunction: Callable[[Optional[Any], Optional[Dict[str, Any]]], None],
        interval: str = '5s',
        fields: Optional[Union[List[str], Dict[str, Any]]] = None,
    ) -> Subscription:
        """Subscribe to published component states of WebStack.

        Args:
            callbackFunction (Callable[[Optional[ControllerGraphClientException], Optional[dict]], None]):
                A function with signature that will be called when the subscription is triggered:
                    def CallbackFunction(error: Optional[ControllerGraphClientException], response: Optional[dict]) -> None
                - error: Contains an error message (or `None` if no error occurred).
                - response: Contains the returned payload (or `None` if an error occurred).
            interval (str, optional): Interval at which the subscription rate should not exceed, for example "2s" or "200ms"
            fields (list or dict, optional): Specifies a subset of fields to return.

        Returns:
            WebStackState: WebStackState contains published component states of WebStack.
        """
        parameterNameTypeValues: List[Tuple[str, str, Any]] = [
            ('interval', 'String', interval),
        ]
        return self._CallSubscribeGraphAPI(operationName='SubscribeWebStackState', parameterNameTypeValues=parameterNameTypeValues, returnType='WebStackState', callbackFunction=callbackFunction, fields=fields)


class GraphQueriesClient(GraphClientBase, GraphQueries):
    pass


class GraphMutationsClient(GraphClientBase, GraphMutations):
    pass


class GraphSubscriptionsClient(GraphClientBase, GraphSubscriptions):
    pass


class GraphClient(GraphClientBase, GraphQueries, GraphMutations, GraphSubscriptions):
    @property
    def queries(self) -> GraphQueriesClient:
        return GraphQueriesClient(self._webclient)

    @property
    def mutations(self) -> GraphMutationsClient:
        return GraphMutationsClient(self._webclient)

    @property
    def subscriptions(self) -> GraphSubscriptionsClient:
        return GraphSubscriptionsClient(self._webclient)


#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED, SEE HEADER
#