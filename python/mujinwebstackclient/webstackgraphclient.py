# -*- coding: utf-8 -*-
#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED
# GENERATED BY: mujin_webstackclientpy_generategraphclient.py
# GENERATED AGAINST: mujinwebstack/2.11.0+76c276bf6635767e6152224e9a5ef121eb9d8265
#

from .webstackgraphclientutils import GraphClientBase
from .webstackgraphclientutils import UseLazyGraphQuery

class GraphQueries:

    def CommandPackingOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='CommandPackingOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandPackingOrchestratorQueries', fields=fields, timeout=timeout)

    def CommandRobotBridgesEx(self, queueId=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='CommandRobotBridgesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotBridgesExQueries', fields=fields, timeout=timeout)

    def CommandRobotBridgesV2(self, queueId=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='CommandRobotBridgesV2', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotBridgesV2Queries', fields=fields, timeout=timeout)

    def ConfigureRobotBridgesEx(self, fields=None, timeout=None):
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='ConfigureRobotBridgesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigureRobotBridgesExQueries', fields=fields, timeout=timeout)

    def ConfigureRobotBridgesV2(self, fields=None, timeout=None):
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='ConfigureRobotBridgesV2', parameterNameTypeValues=parameterNameTypeValues, returnType='ConfigureRobotBridgesV2Queries', fields=fields, timeout=timeout)

    def ExistEnvironment(self, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Check existence for a specific environment.

        Args:
            environmentId (str): ID of an environment for checking existence.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            bool: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ExistEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def ExistEnvironments(self, environmentIds, resolveReferences=None, units=None, fields=None, timeout=None):
        """Check existence for multiple environments.

        Args:
            environmentIds ([String]): IDs of environments for checking existence.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [Boolean]: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues = [
            ('environmentIds', '[String!]!', environmentIds),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ExistEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def GetAlarmDefinition(self, alarmStatus, fields=None, timeout=None):
        """Get the alarm definition by the alarm status.

        Args:
            alarmStatus (AlarmStatus): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AlarmDefinition: An alarm definition entry in the alarm library alarms
        """
        parameterNameTypeValues = [
            ('alarmStatus', 'AlarmStatus!', alarmStatus),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetAlarmDefinition', parameterNameTypeValues=parameterNameTypeValues, returnType='AlarmDefinition', fields=fields, timeout=timeout)

    def GetAppearanceParameters(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get appearance parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AppearanceParameters: A set of parameters that vision detector uses.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='AppearanceParameters', fields=fields, timeout=timeout)

    def GetApplication(self, applicationId, fields=None, timeout=None):
        """Get a specific application.

        Args:
            applicationId (str): ID of an existing application.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Application: Application for the frontend.
        """
        parameterNameTypeValues = [
            ('applicationId', 'String!', applicationId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetApplication', parameterNameTypeValues=parameterNameTypeValues, returnType='Application', fields=fields, timeout=timeout)

    def GetApplicationConfigurationContent(self, applicationId, resolveReferences=None, fields=None, timeout=None):
        """Get application configuration without typing.


        Args:
            applicationId (str): ID of the application, for example "app-scene-editor".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('applicationId', 'String!', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetApplicationConfigurationContent', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetAttachedSensor(self, attachedSensorId, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular attached sensor on a robot.

        Args:
            attachedSensorId (str): ID of the existing attached sensor.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues = [
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def GetBody(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular body in an environment.

        Args:
            bodyId (str): ID of the existing body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def GetBodyParameters(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a body parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            BodyParameters: Parameters of an OpenRAVE 'Body'
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def GetConfiguration(self, configurationId, resolveReferences=None, fields=None, timeout=None):
        """Get a particular configuration.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Configuration: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Configuration', fields=fields, timeout=timeout)

    def GetConnectedBody(self, bodyId, connectedBodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular connected body on a robot.

        Args:
            bodyId (str): ID of the body.
            connectedBodyId (str): ID of the existing connected body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def GetControllerSystemConfiguration(self, resolveReferences=None, fields=None, timeout=None):
        """Get configurations for controller system.

        Args:
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ControllerSystemConfiguration: 
        """
        parameterNameTypeValues = [
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetControllerSystemConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='ControllerSystemConfiguration', fields=fields, timeout=timeout)

    def GetDetectorModuleByDetectorID(self, detectorId, fields=None, timeout=None):
        """Get detector module by detector id.

        Args:
            detectorId (str): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            DetectorModule: Detector module library type.
        """
        parameterNameTypeValues = [
            ('detectorId', 'String!', detectorId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetDetectorModuleByDetectorID', parameterNameTypeValues=parameterNameTypeValues, returnType='DetectorModule', fields=fields, timeout=timeout)

    def GetDeviceBridgeModuleByDeviceBridgeType(self, deviceBridgeType, fields=None, timeout=None):
        """Get device bridge module by device bridge type.

        Args:
            deviceBridgeType (str): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            DeviceBridgeModule: Device bridge module library type.
        """
        parameterNameTypeValues = [
            ('deviceBridgeType', 'String!', deviceBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetDeviceBridgeModuleByDeviceBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='DeviceBridgeModule', fields=fields, timeout=timeout)

    def GetElectronicDataSheet(self, electronicDataSheetId, fields=None, timeout=None):
        """Get a specific electronic data sheet.

        Args:
            electronicDataSheetId (str): ID of the electronic data sheet.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ElectronicDataSheet: An EDS (Electronic Data Sheet) used for network configuration.
        """
        parameterNameTypeValues = [
            ('electronicDataSheetId', 'String!', electronicDataSheetId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetElectronicDataSheet', parameterNameTypeValues=parameterNameTypeValues, returnType='ElectronicDataSheet', fields=fields, timeout=timeout)

    def GetEnvironment(self, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a specific environment.

        Args:
            environmentId (str): ID of an existing environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def GetEnvironments(self, environmentIds, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get multiple environments.

        Args:
            environmentIds ([String]): ID of an existing environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [Environment]: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environmentIds', '[String!]!', environmentIds),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def GetFeedbackHistory(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get feedback history in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            FeedbackHistory: The history of feedback from robotic system such as measured mass, final status of pick (success/piecelost etc.), options that were used for chucking etc.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetFeedbackHistory', parameterNameTypeValues=parameterNameTypeValues, returnType='FeedbackHistory', fields=fields, timeout=timeout)

    def GetGeometry(self, bodyId, environmentId, geometryId, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular geometry in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometryId (str): ID of the existing geometry.
            linkId (str): ID of the link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def GetGrabbed(self, bodyId, environmentId, grabbedId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular grabbed object in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbedId (str): ID of the existing grabbed object.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbedId', 'String!', grabbedId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def GetGraspSet(self, bodyId, environmentId, graspSetId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular grasp set in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSetId (str): ID of the existing grasp set.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSetId', 'String!', graspSetId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def GetGripperBridgeModuleByGripperBridgeType(self, gripperBridgeType, fields=None, timeout=None):
        """Get gripper bridge module by gripper bridge type.

        Args:
            gripperBridgeType (str): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperBridgeModule: Gripper bridge module library type.
        """
        parameterNameTypeValues = [
            ('gripperBridgeType', 'String!', gripperBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGripperBridgeModuleByGripperBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperBridgeModule', fields=fields, timeout=timeout)

    def GetGripperInfo(self, bodyId, environmentId, gripperInfoId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular gripper info on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoId (str): ID of the existing gripper info.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def GetHypervisorCapabilities(self, fields=None, timeout=None):
        """Get capabilities supported by hypervisor.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [String]: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetHypervisorCapabilities', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def GetHypervisorStatus(self, fields=None, timeout=None):
        """Get status of hypervisor.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            HypervisorStatus: Hypervisor status
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetHypervisorStatus', parameterNameTypeValues=parameterNameTypeValues, returnType='HypervisorStatus', fields=fields, timeout=timeout)

    def GetHypervisorVersion(self, fields=None, timeout=None):
        """Get version of hypervisor.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            str: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetHypervisorVersion', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def GetIKParameterization(self, bodyId, environmentId, ikParamId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular ikparam in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParamId (str): ID of the existing ikparam.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameterization describes a pose in space. Includes additional parameters that can affect grasping (e.g. Direction, Angle).
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParamId', 'String!', ikParamId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def GetJoint(self, bodyId, environmentId, jointId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            jointId (str): ID of the existing joint.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('jointId', 'String!', jointId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def GetLink(self, bodyId, environmentId, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular link in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            linkId (str): ID of the existing link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def GetLogEntry(self, logEntryId, fields=None, timeout=None):
        """Get a particular log entry.

        Args:
            logEntryId (str): ID of the log entry.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            LogEntry: An entry in the logs. The current parent-children level relationship among log entry types:
                    
                    ```
                    LogEntry
                    ├─ GenericLogEntry
                    ├─ UserLogEntry
                    ├─ DeviceLogEntry
                    ├─ DeviceSnapshotLogEntry
                    ├─ ProductionCycleLogEntry
                    │  ├─ ProductionCyclePausedLogEntry
                    │  ├─ ProductionCycleResumedLogEntry
                    │  ├─ ProductionCycleFinishedLogEntry
                    │  └─ ProductionOrderRequestLogEntry
                    │     ├─ ProductionOrderResultLogEntry
                    │     ├─ OrderCycleLogEntry
                    │     │  ├─ OrderCyclePreparedLogEntry
                    │     │  ├─ OrderCycleResumedLogEntry
                    │     │  ├─ OrderCycleFinishedLogEntry
                    │     │  │  └─ OrderCycleFinishAnnotationLogEntry
                    │     │  ├─ PlanningCycleLogEntry
                    │     │  ├─ ExecutionCycleLogEntry
                    │     │  ├─ ProcessedTargetLogEntry
                    │     │  ├─ PlacedTargetLogEntry
                    │     │  ├─ VisionContainerDetectionLogEntry
                    │     │  │  ├─ VisionContainerDetectionFinishedLogEntry
                    │     │  │  └─ SnapLogEntry
                    │     │  ├─ VisionObjectDetectionLogEntry
                    │     │  │  ├─ VisionObjectDetectionFinishedLogEntry
                    │     │  │  └─ SnapLogEntry
                    │     │  ├─ VisionExecutionVerificationLogEntry
                    │     │  │  ├─ VisionExecutionVerificationFinishedLogEntry
                    │     │  │  └─ SnapLogEntry
                    │     │  └─ TrajectoryLogEntry
                    │     ├─ PackFormationOrderCycleLogEntry
                    │     │  └─ PackFormationOrderCycleFinishedLogEntry
                    │     ├─ VisionInspectionOrderCycleLogEntry
                    │     │  ├─ VisionInspectionOrderCycleFinishedLogEntry
                    │     │  ├─ VisionContainerDetectionLogEntry
                    │     │  └─ VisionObjectDetectionLogEntry
                    │     └─ ITLOrderCycleLogEntry
                    │        └─ ITLOrderCycleFinishedLogEntry
                    ├─ ManualDetectionLogEntry
                    │  ├─ VisionContainerDetectionLogEntry
                    │  └─ VisionObjectDetectionLogEntry
                    ├─ CalibrationCycleLogEntry
                    │  ├─ CalibrationPosesLogEntry
                    │  ├─ CalibrationObservationPackLogEntry
                    │  │  └─ CalibrationObservationLogEntry
                    │  └─ CalibrationResultHandEyeLogEntry
                    ├─ AccountUserChangeLogEntry
                    ├─ AccountGroupChangeLogEntry
                    ├─ AccountRoleChangeLogEntry
                    ├─ AccountUserGroupRelationChangeLogEntry
                    ├─ AccountGroupRoleRelationChangeLogEntry
                    ├─ AccountRolePermissionRelationChangeLogEntry
                    ├─ AccountAccessLogEntry
                    ├─ ManualOperationLogEntry
                    │  └─ ManualOperationFinishedLogEntry
                    ├─ AlarmLogEntry
                    │  └─ AlarmResolvedLogEntry
                    └─ MobileRobotControlSystemLogEntry
                    ```
        """
        parameterNameTypeValues = [
            ('logEntryId', 'String!', logEntryId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetLogEntry', parameterNameTypeValues=parameterNameTypeValues, returnType='LogEntry', fields=fields, timeout=timeout)

    def GetMesh(self, meshId, meshUnit=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular mesh.

        Args:
            meshId (str): ID of the mesh.
            meshUnit (str, optional): Original unit of the mesh. Defaults to meter.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Mesh: Trangle mesh.
        """
        parameterNameTypeValues = [
            ('meshId', 'String!', meshId),
            ('meshUnit', 'String', meshUnit),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetMesh', parameterNameTypeValues=parameterNameTypeValues, returnType='Mesh', fields=fields, timeout=timeout)

    def GetModelProcessorProperties(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorProperties: A set of values related to the latest model processing state
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorProperties', fields=fields, timeout=timeout)

    def GetModelProcessorState(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get model processor state in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorState: A set of values related to the latest model processing state
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetModelProcessorState', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorState', fields=fields, timeout=timeout)

    def GetModelProcessorTaskState(self, fields=None, timeout=None):
        """Get task state of model processor.


        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorTaskState: Current status of the model processor
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetModelProcessorTaskState', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorTaskState', fields=fields, timeout=timeout)

    def GetOrchestratorMasterConfiguration(self, resolveReferences=None, fields=None, timeout=None):
        """Get configurations for orchestrator master.

        Args:
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            OrchestratorMasterConfiguration: Orchestrator master configuration.
        """
        parameterNameTypeValues = [
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetOrchestratorMasterConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='OrchestratorMasterConfiguration', fields=fields, timeout=timeout)

    def GetOrchestratorModuleByOrchestratorType(self, orchestratorType, fields=None, timeout=None):
        """Get orchestrator module by orchestrator type.

        Args:
            orchestratorType (str): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            OrchestratorModule: Orchestrator module library type.
        """
        parameterNameTypeValues = [
            ('orchestratorType', 'String!', orchestratorType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetOrchestratorModuleByOrchestratorType', parameterNameTypeValues=parameterNameTypeValues, returnType='OrchestratorModule', fields=fields, timeout=timeout)

    def GetPositionConfiguration(self, bodyId, environmentId, positionConfigurationId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular position configuration in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfigurationId (str): ID of the existing position configuration.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def GetProfileSelectionOrder(self, fields=None, timeout=None):
        """Get profile selection order.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [String]: The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProfileSelectionOrder', parameterNameTypeValues=parameterNameTypeValues, returnType='String', fields=fields, timeout=timeout)

    def GetProgram(self, programId, fields=None, timeout=None):
        """Get a specific program.

        Args:
            programId (str): ID of the program.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Program: ITL program.
        """
        parameterNameTypeValues = [
            ('programId', 'String!', programId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Program', fields=fields, timeout=timeout)

    def GetProgramFilesAtReference(self, programId, referenceId, fields=None, timeout=None):
        """Get all program files at a particular reference.

        Args:
            programId (str): ID of the program.
            referenceId (str): ID of the program reference.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [ProgramFile]: 
        """
        parameterNameTypeValues = [
            ('programId', 'String!', programId),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProgramFilesAtReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramFile', fields=fields, timeout=timeout)

    def GetProgramObject(self, objectId, fields=None, timeout=None):
        """Get single program object.

        Args:
            objectId (str): ID of the program object to retrieve.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramObject: A blob, tree or commit object. Can be shared by multiple programs
        """
        parameterNameTypeValues = [
            ('objectId', 'String!', objectId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProgramObject', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramObject', fields=fields, timeout=timeout)

    def GetProgramReference(self, programId, referenceId, fields=None, timeout=None):
        """Get a specific program reference.

        Args:
            programId (str): ID of the program.
            referenceId (str): ID of the reference, "refs/heads/my-branch" for example.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramReference: A named reference pointing to a commit object.
        """
        parameterNameTypeValues = [
            ('programId', 'String!', programId),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramReference', fields=fields, timeout=timeout)

    def GetProviderBridgeModuleByProviderBridgeType(self, providerBridgeType, fields=None, timeout=None):
        """Get provider bridge module by provider bridge type.

        Args:
            providerBridgeType (str): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProviderBridgeModule: Provider bridge module library type.
        """
        parameterNameTypeValues = [
            ('providerBridgeType', 'String!', providerBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetProviderBridgeModuleByProviderBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='ProviderBridgeModule', fields=fields, timeout=timeout)

    def GetRevision(self, environmentId, revisionId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular revision of an environment.

        Args:
            environmentId (str): ID of the environment.
            revisionId (int): ID of the revision.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Revision: Revision of an environment, contains backward and forward differences.
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('revisionId', 'Int!', revisionId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRevision', parameterNameTypeValues=parameterNameTypeValues, returnType='Revision', fields=fields, timeout=timeout)

    def GetRobotBridgeModuleByRobotBridgeType(self, robotBridgeType, fields=None, timeout=None):
        """Get robot bridge module by robot bridge type.

        Args:
            robotBridgeType (str): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotBridgeModule: Robot bridge module library type.
        """
        parameterNameTypeValues = [
            ('robotBridgeType', 'String!', robotBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRobotBridgeModuleByRobotBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotBridgeModule', fields=fields, timeout=timeout)

    def GetRobotBridgesConfiguration(self, resolveReferences=None, fields=None, timeout=None):
        """Get configurations for robotbridges.

        Args:
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotBridgesConfiguration: 
        """
        parameterNameTypeValues = [
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRobotBridgesConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotBridgesConfiguration', fields=fields, timeout=timeout)

    def GetRobotMotionParameters(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a robot motion parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters: A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
                    Also includes information about the robot model and maker.
                    These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def GetSensorBridgeModuleBySensorBridgeType(self, sensorBridgeType, fields=None, timeout=None):
        """Get sensor bridge module by sensor bridge type.

        Args:
            sensorBridgeType (str): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SensorBridgeModule: Sensor bridge module library type.
        """
        parameterNameTypeValues = [
            ('sensorBridgeType', 'String!', sensorBridgeType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetSensorBridgeModuleBySensorBridgeType', parameterNameTypeValues=parameterNameTypeValues, returnType='SensorBridgeModule', fields=fields, timeout=timeout)

    def GetSensorBridgesConfiguration(self, resolveReferences=None, fields=None, timeout=None):
        """Get configurations for sensorbridges.

        Args:
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SensorBridgesConfiguration: 
        """
        parameterNameTypeValues = [
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetSensorBridgesConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SensorBridgesConfiguration', fields=fields, timeout=timeout)

    def GetSignalMapConfiguration(self, configurationId, resolveReferences=None, fields=None, timeout=None):
        """Get signal map.

        Args:
            configurationId (str): ID of the signal map, for example "signalmaps/custom.signalmap".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SignalMapConfiguration: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetSignalMapConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SignalMapConfiguration', fields=fields, timeout=timeout)

    def GetTool(self, bodyId, environmentId, toolId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get a particular tool on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            toolId (str): ID of the existing tool.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('toolId', 'String!', toolId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def GetUntypedAppearanceParameters(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get untyped appearance parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedApplicationConfiguration(self, applicationId, resolveReferences=None, fields=None, timeout=None):
        """Get application configuration without typing.

        Args:
            applicationId (str): ID of the application, for example "app-scene-editor".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('applicationId', 'String!', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedConfiguration(self, configurationId, ifModifiedSinceModifiedAt=None, resolveReferences=None, fields=None, timeout=None):
        """Get a particular configuration without typing.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            ifModifiedSinceModifiedAt (DateTime, optional): If supplied, will return null unless modified after this timestamp.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('ifModifiedSinceModifiedAt', 'DateTime', ifModifiedSinceModifiedAt),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedElectronicDataSheetConfigurationSchema(self, electronicDataSheetId, fields=None, timeout=None):
        """Get the configuration schema for a specific electronic data sheet.

        Args:
            electronicDataSheetId (str): ID of the electronic data sheet.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('electronicDataSheetId', 'String!', electronicDataSheetId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedElectronicDataSheetConfigurationSchema', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedHypervisorStatus(self, fields=None, timeout=None):
        """Get untyped status of hypervisor.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedHypervisorStatus', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedLogEntry(self, logEntryId, fields=None, timeout=None):
        """Get a particular log entry without typing.

        Args:
            logEntryId (str): ID of the log entry.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('logEntryId', 'String!', logEntryId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedLogEntry', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedModelProcessorProperties(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get untyped model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedModelProcessorState(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Get untyped model processor state in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedModelProcessorState', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetUntypedSchema(self, schemaId, fields=None, timeout=None):
        """Get untyped JSON schema by the schema ID.

        Args:
            schemaId (str): ID of the schema.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('schemaId', 'String!', schemaId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetUntypedSchema', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def GetVisionTaskModuleByVisionTaskType(self, visionTaskType, fields=None, timeout=None):
        """Get vision task module by vision task type.

        Args:
            visionTaskType (str): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            VisionTaskModule: Vision task module library type.
        """
        parameterNameTypeValues = [
            ('visionTaskType', 'String!', visionTaskType),
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetVisionTaskModuleByVisionTaskType', parameterNameTypeValues=parameterNameTypeValues, returnType='VisionTaskModule', fields=fields, timeout=timeout)

    def GetWebStackState(self, fields=None, timeout=None):
        """Get published component states of WebStack.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            WebStackState: WebStackState contains published component states of WebStack.
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='GetWebStackState', parameterNameTypeValues=parameterNameTypeValues, returnType='WebStackState', fields=fields, timeout=timeout)

    def IsAttachedSensorMoveable(self, attachedSensorName, bodyName, environmentId, fields=None, timeout=None):
        """Check and see if attached sensor is moveable on a robot

        Args:
            attachedSensorName (str): Name of the attached sensor, could be in the format of "connectedBodyName_attachedSensorName"
            bodyName (str): Name of the body to check
            environmentId (str): ID of the environment to check
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            bool: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues = [
            ('attachedSensorName', 'String!', attachedSensorName),
            ('bodyName', 'String!', bodyName),
            ('environmentId', 'String!', environmentId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='IsAttachedSensorMoveable', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    def IsSensorLinkMoveable(self, bodyName, environmentId, sensorLinkName, fields=None, timeout=None):
        """Check and see if sensor link is moveable on a robot

        Args:
            bodyName (str): Name of the body to check
            environmentId (str): ID of the environment to check
            sensorLinkName (str): Name of the sensor link, could be in the format of "connectedBodyName_sensorLinkName"
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            bool: The `Boolean` scalar type represents `true` or `false`.
        """
        parameterNameTypeValues = [
            ('bodyName', 'String!', bodyName),
            ('environmentId', 'String!', environmentId),
            ('sensorLinkName', 'String!', sensorLinkName),
        ]
        return self._CallSimpleGraphAPI('query', operationName='IsSensorLinkMoveable', parameterNameTypeValues=parameterNameTypeValues, returnType='Boolean', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListAlarmDefinitions(self, options=None, fields=None, timeout=None):
        """List all alarm definitions.

        Args:
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListAlarmDefinitionsReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListAlarmDefinitions', parameterNameTypeValues=parameterNameTypeValues, returnType='ListAlarmDefinitionsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListApplications(self, options=None, fields=None, timeout=None):
        """List all applications.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListApplicationsReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListApplications', parameterNameTypeValues=parameterNameTypeValues, returnType='ListApplicationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListAttachedSensors(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List attached sensors defined on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListAttachedSensorsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListAttachedSensors', parameterNameTypeValues=parameterNameTypeValues, returnType='ListAttachedSensorsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListBodies(self, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List bodies in an environment.

        Args:
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListBodiesReturnValue: 
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListBodies', parameterNameTypeValues=parameterNameTypeValues, returnType='ListBodiesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListConfigurations(self, options=None, resolveReferences=None, fields=None, timeout=None):
        """List available configurations.


        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListConfigurationsReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListConfigurationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListConfigurationsEx(self, options=None, resolveReferences=None, fields=None, timeout=None):
        """List available configurations using aggregation options.

        Args:
            options (ListOptionsWithAggregationsInput, optional): 
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListConfigurationsExReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListConfigurationsEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListConfigurationsExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListConnectedBodies(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List connected bodies defined on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListConnectedBodiesReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListConnectedBodies', parameterNameTypeValues=parameterNameTypeValues, returnType='ListConnectedBodiesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListDetectorModules(self, options=None, fields=None, timeout=None):
        """List detector modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListDetectorModulesReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListDetectorModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListDetectorModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListDeviceBridgeModules(self, options=None, fields=None, timeout=None):
        """List device bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListDeviceBridgeModulesReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListDeviceBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListDeviceBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListElectronicDataSheets(self, options=None, fields=None, timeout=None):
        """List available electronic data sheets.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListElectronicDataSheetReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListElectronicDataSheets', parameterNameTypeValues=parameterNameTypeValues, returnType='ListElectronicDataSheetReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListEnvironments(self, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List all environments.


        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListEnvironmentsReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='ListEnvironmentsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListEnvironmentsEx(self, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List environments with aggregations.

        Args:
            options (ListOptionsWithAggregationsInput, optional): 
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListEnvironmentsExReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListEnvironmentsEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListEnvironmentsExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGeometries(self, bodyId, environmentId, linkId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List geometries in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            linkId (str): ID of the link.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGeometriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGeometries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGeometriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGrabbeds(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List grabbed objects in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGrabbedsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGrabbeds', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGrabbedsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGraspSets(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List grasp sets in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGraspSetsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGraspSets', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGraspSetsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGripperBridgeModules(self, options=None, fields=None, timeout=None):
        """List gripper bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGripperBridgeModulesReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGripperBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGripperBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGripperInfos(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List gripper infos defined on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGripperInfosReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGripperInfos', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGripperInfosReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListGroups(self, options=None, fields=None, timeout=None):
        """List user groups.

        Args:
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListGroupsReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListGroups', parameterNameTypeValues=parameterNameTypeValues, returnType='ListGroupsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListIKParameterizations(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List ikparams in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListIKParameterizationsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListIKParameterizations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListIKParameterizationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListJoints(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List joints in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListJointsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListJoints', parameterNameTypeValues=parameterNameTypeValues, returnType='ListJointsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListLinks(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List links in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListLinksReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLinks', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLinksReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListLogEntries(self, logTypes=None, options=None, fields=None, timeout=None):
        """List available log entries.

        Args:
            logTypes ([String], optional): Filter by log entry type.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListLogEntriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('logTypes', '[String!]', logTypes),
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListLogEntriesEx(self, logTypes=None, options=None, fields=None, timeout=None):
        """List available log entries with new aggregation options.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListLogEntriesExReturnValue: 
        """
        parameterNameTypeValues = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLogEntriesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLogEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListLogEntriesV2(self, logTypes=None, options=None, fields=None, timeout=None):
        """List available log entries with new aggregation options.


        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListLogEntriesV2ReturnValue: 
        """
        parameterNameTypeValues = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListLogEntriesV2', parameterNameTypeValues=parameterNameTypeValues, returnType='ListLogEntriesV2ReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListModules(self, moduleTypes=None, options=None, fields=None, timeout=None):
        """List available modules.

        Args:
            moduleTypes ([String], optional): Filter by module type.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListModulesReturnValue: 
        """
        parameterNameTypeValues = [
            ('moduleTypes', '[String!]', moduleTypes),
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListNonReferencedLogEntries(self, logTypes=None, options=None, fields=None, timeout=None):
        """List log entries that are not referenced by any other log entry.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListNonReferencedLogEntriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListNonReferencedLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListNonReferencedLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListNonReferencingLogEntries(self, logTypes=None, options=None, fields=None, timeout=None):
        """List log entries that are not referencing any other log entry.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListNonReferencingLogEntriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListNonReferencingLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListNonReferencingLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListOrchestratorModules(self, options=None, fields=None, timeout=None):
        """List orchestrator modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListOrchestratorModulesReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListOrchestratorModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListOrchestratorModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListPositionConfigurations(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List position configurations in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListPositionConfigurationsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListPositionConfigurations', parameterNameTypeValues=parameterNameTypeValues, returnType='ListPositionConfigurationsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListPrograms(self, options=None, fields=None, timeout=None):
        """List all programs.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListProgramsReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListPrograms', parameterNameTypeValues=parameterNameTypeValues, returnType='ListProgramsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListProviderBridgeModules(self, options=None, fields=None, timeout=None):
        """List provider bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListProviderBridgeModulesReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListProviderBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListProviderBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListReferencedLogEntries(self, logEntryId, logTypes=None, options=None, fields=None, timeout=None):
        """List particular log entries and their parents.

        Args:
            logEntryId (str): ID of the log entry.
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListReferencedLogEntriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('logEntryId', 'String!', logEntryId),
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListReferencedLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListReferencedLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListReferencingLogEntries(self, logEntryId, logTypes=None, options=None, fields=None, timeout=None):
        """List particular log entries and their children.

        Args:
            logEntryId (str): ID of the log entry.
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListReferencingLogEntriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('logEntryId', 'String!', logEntryId),
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListReferencingLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListReferencingLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListRevisions(self, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List revisions of an environment.

        Args:
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListRevisionsReturnValue: 
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListRevisions', parameterNameTypeValues=parameterNameTypeValues, returnType='ListRevisionsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListRobotBridgeModules(self, options=None, fields=None, timeout=None):
        """List robot bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListRobotBridgeModulesReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListRobotBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListRobotBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListRoles(self, options=None, fields=None, timeout=None):
        """List group roles.

        Args:
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListRolesReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListRoles', parameterNameTypeValues=parameterNameTypeValues, returnType='ListRolesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListSensorBridgeModules(self, options=None, fields=None, timeout=None):
        """List sensor bridge modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListSensorBridgeModulesReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListSensorBridgeModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListSensorBridgeModulesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListStatEntries(self, endedAt=None, intervalType=None, options=None, startedAt=None, statTypes=None, fields=None, timeout=None):
        """Lists all or specific types of statistics entries for a given time interval.


        Args:
            endedAt (DateTime, optional): The time until which statistics entries are requested. Statistics will be returned including the interval that includes this time.
            intervalType (str, optional): The length of the intervals (i.e. the resolution) in which the statistic will be returned. One of:
                    - minute
                    - fiveMinutes
                    - hour
                    - day
                    - week
                    - month
                    - year
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            startedAt (DateTime, optional): The time from which statistics entries are requested. Statistics will be returned from the interval that includes this time. For example, a request for hourly data starting from 12:30 will return hourly data starting from 12:00.
            statTypes ([String], optional): The type of statistics entries to list, defaults to list all. Example values:
                    - system
                    - timeToFirstPick
                    - timeWaitedForPickContainerToArrive
                    - idleTime
                    - blockageTime
                    - starvationTime
                    - numberOfContainersPerLocation
                    - numberOfPickedPartsPerOrderRequest
                    - partWeight
                    - partTransferSpeedMultiplier
                    - multiPick
                    - pickCycleExecutionStatus
                    - orderCycleFinishCode
                    - numberOfHumanInterventions
                    - numberOfRobotInterruptions
                    - systemThroughput
                    - directRobotThroughput
                    - mvrRegistration
                    - recoveryAction
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListStatEntriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('endedAt', 'DateTime', endedAt),
            ('intervalType', 'String', intervalType),
            ('options', 'ListOptionsInput', options),
            ('startedAt', 'DateTime', startedAt),
            ('statTypes', '[String!]', statTypes),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListStatEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListStatEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListStatEntriesEx(self, endedAt=None, intervalType=None, options=None, startedAt=None, statTypes=None, fields=None, timeout=None):
        """Lists all or specific types of statistics entries for a given time interval, with the new aggregation option.

        Args:
            endedAt (DateTime, optional): The time until which statistics entries are requested. Statistics will be returned including the interval that includes this time.
            intervalType (IntervalType, optional): The length of the intervals (i.e. the resolution) in which the statistic will be returned, defaults to list all.
            options (ListOptionsWithAggregationsInput, optional): 
            startedAt (DateTime, optional): The time from which statistics entries are requested. Statistics will be returned from the interval that includes this time. For example, a request for hourly data starting from 12:30 will return hourly data starting from 12:00.
            statTypes ([StatType], optional): The type of statistics entries to list, defaults to list all.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListStatEntriesExReturnValue: 
        """
        parameterNameTypeValues = [
            ('endedAt', 'DateTime', endedAt),
            ('intervalType', 'IntervalType', intervalType),
            ('options', 'ListOptionsWithAggregationsInput', options),
            ('startedAt', 'DateTime', startedAt),
            ('statTypes', '[StatType!]', statTypes),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListStatEntriesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='ListStatEntriesExReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListTools(self, bodyId, environmentId, options=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """List tools defined on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListToolsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('options', 'ListOptionsInput', options),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListTools', parameterNameTypeValues=parameterNameTypeValues, returnType='ListToolsReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListUntypedLogEntries(self, logTypes=None, options=None, fields=None, timeout=None):
        """List available log entries without typing.

        Args:
            logTypes ([LogType], optional): Filter by log entry type.
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListUntypedLogEntriesReturnValue: 
        """
        parameterNameTypeValues = [
            ('logTypes', '[LogType!]', logTypes),
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListUntypedLogEntries', parameterNameTypeValues=parameterNameTypeValues, returnType='ListUntypedLogEntriesReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListUsers(self, options=None, fields=None, timeout=None):
        """List users of the system.

        Args:
            options (ListOptionsWithAggregationsInput, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListUsersReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsWithAggregationsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListUsers', parameterNameTypeValues=parameterNameTypeValues, returnType='ListUsersReturnValue', fields=fields, timeout=timeout)

    @UseLazyGraphQuery
    def ListVisionTaskModules(self, options=None, fields=None, timeout=None):
        """List vision task modules.

        Args:
            options (ListOptionsInput, optional): Optional list query parameters, used to filter returned results.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ListVisionTaskModulesReturnValue: 
        """
        parameterNameTypeValues = [
            ('options', 'ListOptionsInput', options),
        ]
        return self._CallSimpleGraphAPI('query', operationName='ListVisionTaskModules', parameterNameTypeValues=parameterNameTypeValues, returnType='ListVisionTaskModulesReturnValue', fields=fields, timeout=timeout)

    def Ping(self, host, size=None, ttl=None, fields=None, timeout=None):
        """Ping a remote host.

        Args:
            host (str): the host name of the destination address
            size (int, optional): the package size to send
            ttl (int, optional): time to live of the package
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PingReturnValue: 
        """
        parameterNameTypeValues = [
            ('host', 'String!', host),
            ('size', 'Int', size),
            ('ttl', 'Int', ttl),
        ]
        return self._CallSimpleGraphAPI('query', operationName='Ping', parameterNameTypeValues=parameterNameTypeValues, returnType='PingReturnValue', fields=fields, timeout=timeout)

    def QueryAvailableUpgrades(self, fields=None, timeout=None):
        """Query available upgrade images for this controller.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [HypervisorAvailableUpgrade]: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('query', operationName='QueryAvailableUpgrades', parameterNameTypeValues=parameterNameTypeValues, returnType='HypervisorAvailableUpgrade', fields=fields, timeout=timeout)

    def Telnet(self, host, port, data=None, fields=None, timeout=None):
        """Telnet to a remote host using TCP.

        Args:
            host (str): the host name of the destination address
            port (int): the port number of the destination address
            data (Data, optional): bytes in base64 to be sent upon connection
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            TelnetReturnValue: 
        """
        parameterNameTypeValues = [
            ('host', 'String!', host),
            ('port', 'Int!', port),
            ('data', 'Data', data),
        ]
        return self._CallSimpleGraphAPI('query', operationName='Telnet', parameterNameTypeValues=parameterNameTypeValues, returnType='TelnetReturnValue', fields=fields, timeout=timeout)

    def TraverseProgramCommits(self, commitId, limit, fields=None, timeout=None):
        """Traverse program commit objects starting from the given commit.

        Args:
            commitId (str): ID of the program commit object to be traversed.
            limit (int): Depth limit of the traversal.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [ProgramObject]: A blob, tree or commit object. Can be shared by multiple programs
        """
        parameterNameTypeValues = [
            ('commitId', 'String!', commitId),
            ('limit', 'Int!', limit),
        ]
        return self._CallSimpleGraphAPI('query', operationName='TraverseProgramCommits', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramObject', fields=fields, timeout=timeout)

    def TraverseProgramTrees(self, limit, objectId, fields=None, timeout=None):
        """Traverse program tree objects starting from the given commit or tree.

        Args:
            limit (int): Depth limit of the traversal.
            objectId (str): ID of the program tree or commit object to be traversed.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [ProgramObject]: A blob, tree or commit object. Can be shared by multiple programs
        """
        parameterNameTypeValues = [
            ('limit', 'Int!', limit),
            ('objectId', 'String!', objectId),
        ]
        return self._CallSimpleGraphAPI('query', operationName='TraverseProgramTrees', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramObject', fields=fields, timeout=timeout)


class GraphMutations:

    def ActivateRuntimeImage(self, imageId, fields=None, timeout=None):
        """Activate an runtime image.

        Args:
            imageId (str): ID of the runtime image to activate.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('imageId', 'String!', imageId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ActivateRuntimeImage', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def AddDiskDriveToDiskArray(self, diskArray, diskDrive, fields=None, timeout=None):
        """Add a disk drive to a disk array.

        Args:
            diskArray (str): Array name, e.g. "/dev/md0".
            diskDrive (str): Drive name, e.g. "/dev/sda".
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('diskArray', 'String!', diskArray),
            ('diskDrive', 'String!', diskDrive),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='AddDiskDriveToDiskArray', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def AddPermissionToRole(self, permission, roleId, fields=None, timeout=None):
        """Add a permission to a group.

        Args:
            permission (PermissionInput): Permission properties.
            roleId (str): ID of the role to add to.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('permission', 'PermissionInput!', permission),
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='AddPermissionToRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def AddRoleToGroup(self, groupId, roleId, fields=None, timeout=None):
        """Add a role to a group.

        Args:
            groupId (str): ID of the group to add to.
            roleId (str): ID of the role to add.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('groupId', 'String!', groupId),
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='AddRoleToGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def AddUserToGroup(self, groupId, userId, fields=None, timeout=None):
        """Add a user to a group.

        Args:
            groupId (str): ID of the group to add to.
            userId (str): ID of the user to add.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('groupId', 'String!', groupId),
            ('userId', 'String!', userId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='AddUserToGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def CancelUpgrade(self, fields=None, timeout=None):
        """Cancel ongoing upgrade.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CancelUpgrade', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def CommandBaseSystemOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandBaseSystemOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandBaseSystemOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandCalibrationOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandCalibrationOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandCalibrationOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandFleetOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandFleetOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandFleetOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandOrchestratorMaster(self, fields=None, timeout=None):
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandOrchestratorMaster', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandOrchestratorMasterMutations', fields=fields, timeout=timeout)

    def CommandOrderCycleOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandOrderCycleOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandOrderCycleOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandPackingClusterOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandPackingClusterOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandPackingClusterOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandPackingOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandPackingOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandPackingOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandPlanningServer(self, command, environmentId, taskType, parameters=None, slaveRequestId=None, fields=None, timeout=None):
        """Send command to planning server.

        Args:
            command (str): Command to be executed on planning slave.
            environmentId (str): ID of the environment to load on planning slave before executing the command.
            taskType (str): Task type.
            parameters (Any, optional): Additional optional parameters.
            slaveRequestId (str, optional): Optionally specify slave request id indicating which slave to execute the command on.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('command', 'String!', command),
            ('environmentId', 'String!', environmentId),
            ('taskType', 'String!', taskType),
            ('parameters', 'Any', parameters),
            ('slaveRequestId', 'String', slaveRequestId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandPlanningServer', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandProductionCycleOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandProductionCycleOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandProductionCycleOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandRegistrationOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRegistrationOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRegistrationOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandRobotBridges(self, command, parameters=None, queueId=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRobotBridges', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandRobotBridgesEx(self, queueId=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRobotBridgesEx', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotBridgesExMutations', fields=fields, timeout=timeout)

    def CommandRobotBridgesV2(self, queueId=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('queueId', 'String', queueId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRobotBridgesV2', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotBridgesV2Mutations', fields=fields, timeout=timeout)

    def CommandRobotMotorControlOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandRobotMotorControlOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandRobotMotorControlOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandSensorBridges(self, command, parameters=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandSensorBridges', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandTeachWorkerOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandTeachWorkerOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandTeachWorkerOrchestratorMutations', fields=fields, timeout=timeout)

    def CommandUserInterface(self, command, parameters=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandUserInterface', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandVisionManager(self, command, options=None, parameters=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('command', 'String!', command),
            ('options', 'VisionManagerOptionsInput', options),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandVisionManager', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CommandWarehouseExecutionOrchestrator(self, orchestratorId, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('orchestratorId', 'String!', orchestratorId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CommandWarehouseExecutionOrchestrator', parameterNameTypeValues=parameterNameTypeValues, returnType='CommandWarehouseExecutionOrchestratorMutations', fields=fields, timeout=timeout)

    def ConfigureRobotBridges(self, command, parameters=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureRobotBridges', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def ConfigureSensorBridges(self, command, parameters=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureSensorBridges', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def ConfigureUserInterface(self, command, parameters=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('command', 'String!', command),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureUserInterface', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def ConfigureVisionManager(self, command, options=None, parameters=None, fields=None, timeout=None):
        parameterNameTypeValues = [
            ('command', 'String!', command),
            ('options', 'VisionManagerOptionsInput', options),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ConfigureVisionManager', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CopyApplicationConfiguration(self, applicationId, referenceApplicationId, resolveReferences=None, fields=None, timeout=None):
        """Copy configuration for one application to another, return copied content without typing.

        Args:
            applicationId (str): ID of the target application, for example "app-scene-editor".
            referenceApplicationId (str): ID of the source application, for example "app-scene-editor".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('applicationId', 'String!', applicationId),
            ('referenceApplicationId', 'String!', referenceApplicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CopyAttachedSensor(self, attachedSensor, attachedSensorId, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing attached sensor on a robot to a new one.

        Args:
            attachedSensor (AttachedSensorInput): Properties to change on the copied the attached sensor.
            attachedSensorId (str): ID of the existing attached sensor.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def CopyBody(self, body, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing body in an environment to a new one.

        Args:
            body (BodyInput): Properties to be applied on the copied body.
            bodyId (str): ID of the existing body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def CopyConfiguration(self, configurationId, referenceConfigurationId, resolveReferences=None, fields=None, timeout=None):
        """Copy configuration.

        Args:
            configurationId (str): ID of the destination configuration, for example "controllersystem.conf".
            referenceConfigurationId (str): ID of the source configuration, for example "controllersystem.conf".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('referenceConfigurationId', 'String!', referenceConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def CopyConnectedBody(self, bodyId, connectedBody, connectedBodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing connected body on a robot to a new one.

        Args:
            bodyId (str): ID of the body.
            connectedBody (ConnectedBodyInput): Properties to change on the copied the connected body.
            connectedBodyId (str): ID of the existing connected body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def CopyEnvironment(self, environment, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing environment to a new one.

        Args:
            environment (EnvironmentInput): Properties to be applied on the copied environment.
            environmentId (str): ID of the existing environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def CopyGeometry(self, bodyId, environmentId, geometry, geometryId, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing geometry in a link to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometry (GeometryInput): Properties to be applied on the copied geometry.
            geometryId (str): ID of the existing geometry.
            linkId (str): ID of the link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def CopyGrabbed(self, bodyId, environmentId, grabbed, grabbedId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing grabbed object in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbed (GrabbedInput): Properties to be applied on the copied grabbed object.
            grabbedId (str): ID of the existing grabbed object.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('grabbedId', 'String!', grabbedId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def CopyGraspSet(self, bodyId, environmentId, graspSet, graspSetId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing grasp set in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSet (GraspSetInput): Properties to be applied on the copied grasp set.
            graspSetId (str): ID of the existing grasp set.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('graspSetId', 'String!', graspSetId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def CopyGripperInfo(self, bodyId, environmentId, gripperInfo, gripperInfoId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing gripper info on a robot to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfo (GripperInfoInput): Properties to change on the copied the gripper info.
            gripperInfoId (str): ID of the existing gripper info.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def CopyIKParameterization(self, bodyId, environmentId, ikParam, ikParamId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing ikparam in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParam (IKParameterizationInput): Properties to be applied on the copied ikparam.
            ikParamId (str): ID of the existing ikparam.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameterization describes a pose in space. Includes additional parameters that can affect grasping (e.g. Direction, Angle).
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('ikParamId', 'String!', ikParamId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def CopyLink(self, bodyId, environmentId, link, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing link in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            link (LinkInput): Properties to be applied on the copied link.
            linkId (str): ID of the existing link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def CopyLinkAndJoint(self, bodyId, environmentId, joint, link, linkId, parentLinkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing link and joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            joint (JointInput): Properties to be applied on the copied joint.
            link (LinkInput): Properties to be applied on the copied link.
            linkId (str): ID of the existing link.
            parentLinkId (str): ID of the parent link where copied link belongs to.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CopyLinkAndJointReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('parentLinkId', 'String!', parentLinkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyLinkAndJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='CopyLinkAndJointReturnValue', fields=fields, timeout=timeout)

    def CopyPositionConfiguration(self, bodyId, environmentId, positionConfiguration, positionConfigurationId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing position configuration in a body to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfiguration (PositionConfigurationInput): Properties to be applied on the copied position configuration.
            positionConfigurationId (str): ID of the existing position configuration.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def CopyProgram(self, program, programId, commitOptions=None, fields=None, timeout=None):
        """Copy a program. Copy is done by forking the git repository.

        Args:
            program (ProgramInput): Properties to be applied on the copied program. ID of the copied program should be specified.
            programId (str): ID of the program to be copied.
            commitOptions (CommitOptionsInput, optional): Commit options.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Program: ITL program.
        """
        parameterNameTypeValues = [
            ('program', 'ProgramInput!', program),
            ('programId', 'String!', programId),
            ('commitOptions', 'CommitOptionsInput', commitOptions),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Program', fields=fields, timeout=timeout)

    def CopyProgramReference(self, programId, reference, referenceId, fields=None, timeout=None):
        """Copy a program reference.

        Args:
            programId (str): ID of the program.
            reference (ProgramReferenceInput): Properties to be applied on the copied reference. ID of the copied reference must be set.
            referenceId (str): ID of the reference to be copied.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramReference: A named reference pointing to a commit object.
        """
        parameterNameTypeValues = [
            ('programId', 'String!', programId),
            ('reference', 'ProgramReferenceInput!', reference),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramReference', fields=fields, timeout=timeout)

    def CopySignalMapConfiguration(self, configurationId, referenceConfigurationId, resolveReferences=None, fields=None, timeout=None):
        """Copy signal map and return copied signal map.

        Args:
            configurationId (str): ID of the destination signal map, for example "signalmaps/custom.signalmap".
            referenceConfigurationId (str): ID of the source signal map, for example "signalmaps/custom.signalmap".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SignalMapConfiguration: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('referenceConfigurationId', 'String!', referenceConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopySignalMapConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SignalMapConfiguration', fields=fields, timeout=timeout)

    def CopyTool(self, bodyId, environmentId, tool, toolId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Copy an existing tool on a robot to a new one.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            tool (ToolInput): Properties to change on the copied the tool.
            toolId (str): ID of the existing tool.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('toolId', 'String!', toolId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CopyTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def CreateAppearanceParameters(self, appearanceParameters, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new appearance parameters in a body.

        Args:
            appearanceParameters (AppearanceParametersInput): Properties to be applied on the newly created appearance parameters.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AppearanceParameters: A set of parameters that vision detector uses.
        """
        parameterNameTypeValues = [
            ('appearanceParameters', 'AppearanceParametersInput!', appearanceParameters),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='AppearanceParameters', fields=fields, timeout=timeout)

    def CreateAttachedSensor(self, attachedSensor, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new attached sensor on a robot.

        Args:
            attachedSensor (AttachedSensorInput): Properties for the new attached sensor.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def CreateBody(self, body, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new body in an environment.

        Args:
            body (BodyInput): Properties to be applied on the newly created body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def CreateBodyParameters(self, bodyId, bodyParameters, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new body parameters in a body.

        Args:
            bodyId (str): ID of the body.
            bodyParameters (BodyParametersInput): Properties to be applied on the newly created body parameters.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            BodyParameters: Parameters of an OpenRAVE 'Body'
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('bodyParameters', 'BodyParametersInput!', bodyParameters),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def CreateConnectedBody(self, bodyId, connectedBody, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new connected body on a robot.

        Args:
            bodyId (str): ID of the body.
            connectedBody (ConnectedBodyInput): Properties for the new connected body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def CreateEnvironment(self, environment, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new environment.

        Args:
            environment (EnvironmentInput): Properties to be applied on the newly created environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def CreateFeedbackHistory(self, bodyId, environmentId, feedbackHistory, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new feedback history in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            feedbackHistory (FeedbackHistoryInput): Properties to be applied on the newly created feedback history.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            FeedbackHistory: The history of feedback from robotic system such as measured mass, final status of pick (success/piecelost etc.), options that were used for chucking etc.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('feedbackHistory', 'FeedbackHistoryInput!', feedbackHistory),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateFeedbackHistory', parameterNameTypeValues=parameterNameTypeValues, returnType='FeedbackHistory', fields=fields, timeout=timeout)

    def CreateGeometry(self, bodyId, environmentId, geometry, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new geometry in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometry (GeometryInput): Properties to be applied on the newly created geometry.
            linkId (str): ID of the existing geometry.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def CreateGrabbed(self, bodyId, environmentId, grabbed, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new grabbed object in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbed (GrabbedInput): Properties to be applied on the newly created grabbed object.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def CreateGraspSet(self, bodyId, environmentId, graspSet, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new grasp set in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSet (GraspSetInput): Properties to be applied on the newly created grasp set.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def CreateGripperInfo(self, bodyId, environmentId, gripperInfo, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new gripper info on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfo (GripperInfoInput): Properties for the new gripper info.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def CreateGroup(self, group, fields=None, timeout=None):
        """Create a new group.

        Args:
            group (GroupInput): Properties to be applied on the created group.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Group: Group of multiple User, a User can belong to multiple Group.
                    A User must belong to a Group to receive Role assignment.
        """
        parameterNameTypeValues = [
            ('group', 'GroupInput!', group),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Group', fields=fields, timeout=timeout)

    def CreateIKParameterization(self, bodyId, environmentId, ikParam, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new ikparam in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParam (IKParameterizationInput): Properties to be applied on the newly created ikparam.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameterization describes a pose in space. Includes additional parameters that can affect grasping (e.g. Direction, Angle).
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def CreateLink(self, bodyId, environmentId, link, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a top-level link in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            link (LinkInput): Properties to be applied on the newly created link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def CreateLinkAndJoint(self, bodyId, environmentId, link, joint=None, parentLinkId=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new link and joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            link (LinkInput): Properties to be applied on the newly created link.
            joint (JointInput, optional): Properties to be applied on the newly created joint. When creating base link, no joint will be created.
            parentLinkId (str, optional): ID of the parent link, if any. When creating base link, do not supply parent link ID.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            CreateLinkAndJointReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('joint', 'JointInput', joint),
            ('parentLinkId', 'String', parentLinkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateLinkAndJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='CreateLinkAndJointReturnValue', fields=fields, timeout=timeout)

    def CreateModelProcessorProperties(self, bodyId, environmentId, modelProcessorProperties, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            modelProcessorProperties (ModelProcessorPropertiesInput): Properties to be applied on the newly created model processor properties.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorProperties: A set of values related to the latest model processing state
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('modelProcessorProperties', 'ModelProcessorPropertiesInput!', modelProcessorProperties),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorProperties', fields=fields, timeout=timeout)

    def CreatePositionConfiguration(self, bodyId, environmentId, positionConfiguration, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new position configuration in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfiguration (PositionConfigurationInput): Properties to be applied on the newly created position configuration.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreatePositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def CreateProgram(self, program, commitOptions=None, fields=None, timeout=None):
        """Create a program.

        Args:
            program (ProgramInput): Properties to be applied on the created program. ID of the program should be specified.
            commitOptions (CommitOptionsInput, optional): Commit options.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Program: ITL program.
        """
        parameterNameTypeValues = [
            ('program', 'ProgramInput!', program),
            ('commitOptions', 'CommitOptionsInput', commitOptions),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Program', fields=fields, timeout=timeout)

    def CreateProgramReference(self, programId, reference, fields=None, timeout=None):
        """Create a program reference.

        Args:
            programId (str): ID of the program.
            reference (ProgramReferenceInput): Properties to be applied on the created reference. ID of the reference must be set.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramReference: A named reference pointing to a commit object.
        """
        parameterNameTypeValues = [
            ('programId', 'String!', programId),
            ('reference', 'ProgramReferenceInput!', reference),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramReference', fields=fields, timeout=timeout)

    def CreateRobotMotionParameters(self, bodyId, environmentId, robotMotionParameters, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new robot motion parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            robotMotionParameters (RobotMotionParametersInput): Properties to be applied on the newly created robot motion parameters.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters: A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
                    Also includes information about the robot model and maker.
                    These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('robotMotionParameters', 'RobotMotionParametersInput!', robotMotionParameters),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def CreateRole(self, role, fields=None, timeout=None):
        """Create a new role.

        Args:
            role (RoleInput): Properties to be applied on the created role.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Role: Each Group can have zero or more Role assigned.
                    A Role can be assigned to multiple Group.
        """
        parameterNameTypeValues = [
            ('role', 'RoleInput!', role),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Role', fields=fields, timeout=timeout)

    def CreateTool(self, bodyId, environmentId, tool, resolveReferences=None, units=None, fields=None, timeout=None):
        """Create a new tool on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            tool (ToolInput): Properties for the new tool.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def CreateUser(self, user, fields=None, timeout=None):
        """Create a new user.

        Args:
            user (UserInput): Properties to be applied on the created user.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            User: Represents one identity, such as “John Doe”.
        """
        parameterNameTypeValues = [
            ('user', 'UserInput!', user),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='CreateUser', parameterNameTypeValues=parameterNameTypeValues, returnType='User', fields=fields, timeout=timeout)

    def DeleteAppearanceParameters(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a appearance parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteApplication(self, applicationId, fields=None, timeout=None):
        """Delete an application.

        Args:
            applicationId (str): ID of the application to delete.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('applicationId', 'String!', applicationId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteApplication', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteApplicationConfiguration(self, applicationId, resolveReferences=None, fields=None, timeout=None):
        """Delete application configuration.

        Args:
            applicationId (str): ID of the application, for example "app-scene-editor".
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('applicationId', 'String!', applicationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteAttachedSensor(self, attachedSensorId, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a attached sensor from a robot.

        Args:
            attachedSensorId (str): ID of the attached sensor to delete.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteBody(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a body in an environment.

        Args:
            bodyId (str): ID of the body to delete.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteBodyParameters(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a body parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteConfiguration(self, configurationId, resolveReferences=None, fields=None, timeout=None):
        """Delete configuration.

        Args:
            configurationId (str): ID of the configuration to delete.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteConnectedBody(self, bodyId, connectedBodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a connected body from a robot.

        Args:
            bodyId (str): ID of the body.
            connectedBodyId (str): ID of the connected body to delete.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteElectronicDataSheet(self, electronicDataSheetId, fields=None, timeout=None):
        """Delete an electronic data sheet.

        Args:
            electronicDataSheetId (str): ID of the electronic data sheet.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('electronicDataSheetId', 'String!', electronicDataSheetId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteElectronicDataSheet', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteEnvironment(self, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete an environment.

        Args:
            environmentId (str): ID of the environment to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteEnvironments(self, environmentIds, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete multiple environments.

        Args:
            environmentIds ([String]): IDs of the environments to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('environmentIds', '[String!]!', environmentIds),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteFeedbackHistory(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a feedback history in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteFeedbackHistory', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGeometry(self, bodyId, environmentId, geometryId, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a geometry in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometryId (str): ID of the geometry to delete.
            linkId (str): ID of the link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGrabbed(self, bodyId, environmentId, grabbedId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a grabbed object in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbedId (str): ID of the grabbed object to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbedId', 'String!', grabbedId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGraspSet(self, bodyId, environmentId, graspSetId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a grasp set in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSetId (str): ID of the grasp set to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSetId', 'String!', graspSetId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGripperInfo(self, bodyId, environmentId, gripperInfoId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a gripper info from a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfoId (str): ID of the gripper info to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteGroup(self, groupId, fields=None, timeout=None):
        """Delete a group.

        Args:
            groupId (str): ID of the group to delete.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('groupId', 'String!', groupId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteIKParameterization(self, bodyId, environmentId, ikParamId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a ikparam in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParamId (str): ID of the ikparam to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParamId', 'String!', ikParamId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteLink(self, bodyId, environmentId, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a top-level link in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            linkId (str): ID of the link to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteLinkAndJoint(self, bodyId, environmentId, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a link and its joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            linkId (str): ID of the link to be deleted.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            DeleteLinkAndJointReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteLinkAndJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='DeleteLinkAndJointReturnValue', fields=fields, timeout=timeout)

    def DeleteModelProcessorProperties(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeletePositionConfiguration(self, bodyId, environmentId, positionConfigurationId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a position configuration in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfigurationId (str): ID of the position configuration to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeletePositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteProgram(self, programId, fields=None, timeout=None):
        """Delete a program.

        Args:
            programId (str): ID of the program to be deleted.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('programId', 'String!', programId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteProgramReference(self, programId, referenceId, fields=None, timeout=None):
        """Delete a program reference.

        Args:
            programId (str): ID of the program.
            referenceId (str): ID of the reference to be deleted.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('programId', 'String!', programId),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteReadable(self, bodyId, environmentId, readableId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete an existing readable interface in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            readableId (str): ID of the readable.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('readableId', 'String!', readableId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteReadable', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteRobotMotionParameters(self, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a robot motion parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteRole(self, roleId, fields=None, timeout=None):
        """Delete a role.

        Args:
            roleId (str): ID of the role to delete.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteTool(self, bodyId, environmentId, toolId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Delete a tool from a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            toolId (str): ID of the tool to delete.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('toolId', 'String!', toolId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def DeleteUser(self, userId, fields=None, timeout=None):
        """Delete a user.

        Args:
            userId (str): ID of the user to delete.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('userId', 'String!', userId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='DeleteUser', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def ExtractBody(self, body, bodyId, environment, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Extract a body from an environment as a new single body environment.

        Args:
            body (BodyInput): Properties to be applied on the newly created body.
            bodyId (str): ID of the body to extract.
            environment (EnvironmentInput): Properties to be applied on the newly created environment.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ExtractBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def ForceSyncNetworkTime(self, fields=None, timeout=None):
        """Force sync network time.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ForceSyncNetworkTime', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def GetLatestDetectionResultImages(self, options=None, parameters=None, fields=None, timeout=None):
        """Get latest detection result images with metadata.

        Args:
            options (VisionManagerOptionsInput, optional): 
            parameters (Any, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [MujinImage]: Holds data related to a captured images.
        """
        parameterNameTypeValues = [
            ('options', 'VisionManagerOptionsInput', options),
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='GetLatestDetectionResultImages', parameterNameTypeValues=parameterNameTypeValues, returnType='MujinImage', fields=fields, timeout=timeout)

    def Halt(self, fields=None, timeout=None):
        """Power off controller.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='Halt', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def IdentifyNetworkInterface(self, label=None, fields=None, timeout=None):
        """Blink the LED on the LAN port.

        Args:
            label (str, optional): Interface label, omit to stop blinking.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('label', 'String', label),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='IdentifyNetworkInterface', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def Login(self, username, password=None, fields=None, timeout=None):
        """Returns a JWT token for the given username and password.

        Args:
            username (str): User username.
            password (str, optional): User password.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            LoginReturnValue: 
        """
        parameterNameTypeValues = [
            ('username', 'String!', username),
            ('password', 'String', password),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='Login', parameterNameTypeValues=parameterNameTypeValues, returnType='LoginReturnValue', fields=fields, timeout=timeout)

    def MergeApplicationConfigurationContent(self, applicationId, content, resolveReferences=None, fields=None, timeout=None):
        """Merge changes into application configuration without typing.


        Args:
            applicationId (str): ID of the application, for example "app-scene-editor".
            content (Any): Untyped content to merge into the configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('applicationId', 'String!', applicationId),
            ('content', 'Any!', content),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeApplicationConfigurationContent', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def MergeConfiguration(self, configurationId, content, resolveReferences=None, fields=None, timeout=None):
        """Merge changes into a particular configuration.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            content (Any): Untyped content to merge into the configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Configuration: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('content', 'Any!', content),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Configuration', fields=fields, timeout=timeout)

    def MergeControllerSystemConfiguration(self, controllerSystemConfiguration, resolveReferences=None, fields=None, timeout=None):
        """Update configuration by merging a partial configuration into it.

        Args:
            controllerSystemConfiguration (ControllerSystemConfigurationInput): Partial configuration to be merged into existing configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ControllerSystemConfiguration: 
        """
        parameterNameTypeValues = [
            ('controllerSystemConfiguration', 'ControllerSystemConfigurationInput!', controllerSystemConfiguration),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeControllerSystemConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='ControllerSystemConfiguration', fields=fields, timeout=timeout)

    def MergeEnvironment(self, environment, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Merge partial environment to an existing environment.

        Args:
            environment (EnvironmentInput): Properties to be merged on the existing environment.
            environmentId (str): ID of the environment to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def MergeEnvironments(self, environmentIds, environments, resolveReferences=None, units=None, fields=None, timeout=None):
        """Merge partial environments to existing environments.

        Args:
            environmentIds ([String]): IDs of the environments to modify.
            environments ([EnvironmentInput]): Properties to be merged on the existing environments.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [Environment]: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environmentIds', '[String!]!', environmentIds),
            ('environments', '[EnvironmentInput!]!', environments),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def MergeOrchestratorMasterConfiguration(self, orchestratorMasterConfiguration, resolveReferences=None, fields=None, timeout=None):
        """Update configuration by merging a partial configuration into it.

        Args:
            orchestratorMasterConfiguration (OrchestratorMasterConfigurationInput): Partial configuration to be merged into existing configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            OrchestratorMasterConfiguration: Orchestrator master configuration.
        """
        parameterNameTypeValues = [
            ('orchestratorMasterConfiguration', 'OrchestratorMasterConfigurationInput!', orchestratorMasterConfiguration),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeOrchestratorMasterConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='OrchestratorMasterConfiguration', fields=fields, timeout=timeout)

    def MergeProgramFilesAtReference(self, files, programId, referenceId, commitOptions=None, fields=None, timeout=None):
        """Merge changes to files into a program at a particular reference.

        Args:
            files ([ProgramFileInput]): List of files to be merged into the program at specified reference.
            programId (str): ID of the program.
            referenceId (str): ID of the program reference, "refs/heads/my-branch" for example.
            commitOptions (CommitOptionsInput, optional): Commit options.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [ProgramFile]: 
        """
        parameterNameTypeValues = [
            ('files', '[ProgramFileInput!]!', files),
            ('programId', 'String!', programId),
            ('referenceId', 'String!', referenceId),
            ('commitOptions', 'CommitOptionsInput', commitOptions),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeProgramFilesAtReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramFile', fields=fields, timeout=timeout)

    def MergeRobotBridgesConfiguration(self, robotBridgesConfiguration, resolveReferences=None, fields=None, timeout=None):
        """Update configuration by merging a partial configuration into it.

        Args:
            robotBridgesConfiguration (RobotBridgesConfigurationInput): Partial configuration to be merged into existing configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotBridgesConfiguration: 
        """
        parameterNameTypeValues = [
            ('robotBridgesConfiguration', 'RobotBridgesConfigurationInput!', robotBridgesConfiguration),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeRobotBridgesConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotBridgesConfiguration', fields=fields, timeout=timeout)

    def MergeSensorBridgesConfiguration(self, sensorBridgesConfiguration, resolveReferences=None, fields=None, timeout=None):
        """Update configuration by merging a partial configuration into it.

        Args:
            sensorBridgesConfiguration (SensorBridgesConfigurationInput): Partial configuration to be merged into existing configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SensorBridgesConfiguration: 
        """
        parameterNameTypeValues = [
            ('sensorBridgesConfiguration', 'SensorBridgesConfigurationInput!', sensorBridgesConfiguration),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeSensorBridgesConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SensorBridgesConfiguration', fields=fields, timeout=timeout)

    def MergeSignalMapConfiguration(self, configurationId, signalMapConfiguration, resolveReferences=None, fields=None, timeout=None):
        """Update signal map by merging a partial signal map into it.

        Args:
            configurationId (str): ID of the signal map, for example "signalmaps/custom.signalmap".
            signalMapConfiguration (SignalMapConfigurationInput): Partial configuration to be merged into existing configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SignalMapConfiguration: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('signalMapConfiguration', 'SignalMapConfigurationInput!', signalMapConfiguration),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeSignalMapConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='SignalMapConfiguration', fields=fields, timeout=timeout)

    def MergeUntypedApplicationConfiguration(self, applicationId, content, resolveReferences=None, fields=None, timeout=None):
        """Merge changes into application configuration without typing.

        Args:
            applicationId (str): ID of the application, for example "app-scene-editor".
            content (Any): Untyped content to merge into the configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('applicationId', 'String!', applicationId),
            ('content', 'Any!', content),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeUntypedApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def MergeUntypedConfiguration(self, configurationId, content, resolveReferences=None, fields=None, timeout=None):
        """Merge changes into a particular configuration without typing.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            content (Any): Untyped content to merge into the configuration.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('content', 'Any!', content),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='MergeUntypedConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def ModifyAppearanceParameters(self, appearanceParameters, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing appearance parameters in a body.

        Args:
            appearanceParameters (AppearanceParametersInput): Properties to be modified on the appearance parameters.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AppearanceParameters: A set of parameters that vision detector uses.
        """
        parameterNameTypeValues = [
            ('appearanceParameters', 'AppearanceParametersInput!', appearanceParameters),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyAppearanceParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='AppearanceParameters', fields=fields, timeout=timeout)

    def ModifyAttachedSensor(self, attachedSensor, attachedSensorId, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing attached sensor on a robot.

        Args:
            attachedSensor (AttachedSensorInput): Proprties to modify on the attached sensor.
            attachedSensorId (str): ID of the attached sensor to modify.
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            AttachedSensor: A sensor that is attached to a robot, e.g. a camera or a force sensor.
        """
        parameterNameTypeValues = [
            ('attachedSensor', 'AttachedSensorInput!', attachedSensor),
            ('attachedSensorId', 'String!', attachedSensorId),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyAttachedSensor', parameterNameTypeValues=parameterNameTypeValues, returnType='AttachedSensor', fields=fields, timeout=timeout)

    def ModifyBody(self, body, bodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing body in an environment.

        Args:
            body (BodyInput): Properties to be modified on the body.
            bodyId (str): ID of the body to modify.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Body: An OpenRAVE body in an environment. Can also describe a robot (a body with multiple links and joints)
        """
        parameterNameTypeValues = [
            ('body', 'BodyInput!', body),
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyBody', parameterNameTypeValues=parameterNameTypeValues, returnType='Body', fields=fields, timeout=timeout)

    def ModifyBodyParameters(self, bodyId, bodyParameters, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing body parameters in a body.

        Args:
            bodyId (str): ID of the body.
            bodyParameters (BodyParametersInput): Properties to be modified on the body parameters.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            BodyParameters: Parameters of an OpenRAVE 'Body'
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('bodyParameters', 'BodyParametersInput!', bodyParameters),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyBodyParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='BodyParameters', fields=fields, timeout=timeout)

    def ModifyConnectedBody(self, bodyId, connectedBody, connectedBodyId, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing connected body on a robot.

        Args:
            bodyId (str): ID of the body.
            connectedBody (ConnectedBodyInput): Proprties to modify on the connected body.
            connectedBodyId (str): ID of the connected body to modify.
            environmentId (str): ID of the environment.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ConnectedBody: A body that is connected to another.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('connectedBody', 'ConnectedBodyInput!', connectedBody),
            ('connectedBodyId', 'String!', connectedBodyId),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyConnectedBody', parameterNameTypeValues=parameterNameTypeValues, returnType='ConnectedBody', fields=fields, timeout=timeout)

    def ModifyElectronicDataSheet(self, electronicDataSheet, electronicDataSheetId, fields=None, timeout=None):
        """Modify an existing electronic data sheet.

        Args:
            electronicDataSheet (ElectronicDataSheetInput): Properties to be modified on the existing electronic data sheet.
            electronicDataSheetId (str): ID of the electronic data sheet to modify.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ElectronicDataSheet: An EDS (Electronic Data Sheet) used for network configuration.
        """
        parameterNameTypeValues = [
            ('electronicDataSheet', 'ElectronicDataSheetInput!', electronicDataSheet),
            ('electronicDataSheetId', 'String!', electronicDataSheetId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyElectronicDataSheet', parameterNameTypeValues=parameterNameTypeValues, returnType='ElectronicDataSheet', fields=fields, timeout=timeout)

    def ModifyEnvironment(self, environment, environmentId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing environment.

        Args:
            environment (EnvironmentInput): Properties to be modified on the existing environment.
            environmentId (str): ID of the environment to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Environment: An OpenRAVE Environment
        """
        parameterNameTypeValues = [
            ('environment', 'EnvironmentInput!', environment),
            ('environmentId', 'String!', environmentId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyEnvironment', parameterNameTypeValues=parameterNameTypeValues, returnType='Environment', fields=fields, timeout=timeout)

    def ModifyFeedbackHistory(self, bodyId, environmentId, feedbackHistory, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing feedback history in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            feedbackHistory (FeedbackHistoryInput): Properties to be modified on the feedback history.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            FeedbackHistory: The history of feedback from robotic system such as measured mass, final status of pick (success/piecelost etc.), options that were used for chucking etc.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('feedbackHistory', 'FeedbackHistoryInput!', feedbackHistory),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyFeedbackHistory', parameterNameTypeValues=parameterNameTypeValues, returnType='FeedbackHistory', fields=fields, timeout=timeout)

    def ModifyGeometry(self, bodyId, environmentId, geometry, geometryId, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing geometry in a link.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            geometry (GeometryInput): Properties to be modified on the geometry.
            geometryId (str): ID of the geometry to modify.
            linkId (str): ID of the link.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Geometry: Geometry of a link. A link can have multiple geometries, and a body can have multiple links. All geometries of a link move together.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('geometry', 'GeometryInput!', geometry),
            ('geometryId', 'String!', geometryId),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGeometry', parameterNameTypeValues=parameterNameTypeValues, returnType='Geometry', fields=fields, timeout=timeout)

    def ModifyGrabbed(self, bodyId, environmentId, grabbed, grabbedId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing grabbed object in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            grabbed (GrabbedInput): Properties to be modified on the grabbed object.
            grabbedId (str): ID of the grabbed object to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Grabbed: An object that is currently grabbed (grasped) by the robot.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('grabbed', 'GrabbedInput!', grabbed),
            ('grabbedId', 'String!', grabbedId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGrabbed', parameterNameTypeValues=parameterNameTypeValues, returnType='Grabbed', fields=fields, timeout=timeout)

    def ModifyGraspSet(self, bodyId, environmentId, graspSet, graspSetId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing grasp set in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            graspSet (GraspSetInput): Properties to be modified on the grasp set.
            graspSetId (str): ID of the grasp set to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GraspSet: Represents a set of IKParams at which an object may be grasped.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('graspSet', 'GraspSetInput!', graspSet),
            ('graspSetId', 'String!', graspSetId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGraspSet', parameterNameTypeValues=parameterNameTypeValues, returnType='GraspSet', fields=fields, timeout=timeout)

    def ModifyGripperInfo(self, bodyId, environmentId, gripperInfo, gripperInfoId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing gripper info on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            gripperInfo (GripperInfoInput): Proprties to modify on the gripper info.
            gripperInfoId (str): ID of the gripper info to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            GripperInfo: Gripper info describing the gripper properties, used for planning gripper operations.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('gripperInfo', 'GripperInfoInput!', gripperInfo),
            ('gripperInfoId', 'String!', gripperInfoId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGripperInfo', parameterNameTypeValues=parameterNameTypeValues, returnType='GripperInfo', fields=fields, timeout=timeout)

    def ModifyGroup(self, group, fields=None, timeout=None):
        """Modify an existing group.

        Args:
            group (GroupInput): Properties to be applied on the modified group.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Group: Group of multiple User, a User can belong to multiple Group.
                    A User must belong to a Group to receive Role assignment.
        """
        parameterNameTypeValues = [
            ('group', 'GroupInput!', group),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Group', fields=fields, timeout=timeout)

    def ModifyIKParameterization(self, bodyId, environmentId, ikParam, ikParamId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing ikparam in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            ikParam (IKParameterizationInput): Properties to be modified on the ikparam.
            ikParamId (str): ID of the ikparam to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            IKParameterization: Inverse Kinematics Parameterization describes a pose in space. Includes additional parameters that can affect grasping (e.g. Direction, Angle).
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('ikParam', 'IKParameterizationInput!', ikParam),
            ('ikParamId', 'String!', ikParamId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyIKParameterization', parameterNameTypeValues=parameterNameTypeValues, returnType='IKParameterization', fields=fields, timeout=timeout)

    def ModifyJoint(self, bodyId, environmentId, joint, jointId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing joint in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            joint (JointInput): Properties to be modified on the joint.
            jointId (str): ID of the joint to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Joint: Joint in a body, which connects a parent link and a child link. Can have multiple degrees of freedom.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('joint', 'JointInput!', joint),
            ('jointId', 'String!', jointId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyJoint', parameterNameTypeValues=parameterNameTypeValues, returnType='Joint', fields=fields, timeout=timeout)

    def ModifyLink(self, bodyId, environmentId, link, linkId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing link in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            link (LinkInput): Properties to be modified on the link.
            linkId (str): ID of the link to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Link: Link of a body, containing geometries. Links can be connected by joints.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('link', 'LinkInput!', link),
            ('linkId', 'String!', linkId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyLink', parameterNameTypeValues=parameterNameTypeValues, returnType='Link', fields=fields, timeout=timeout)

    def ModifyModelProcessorProperties(self, bodyId, environmentId, modelProcessorProperties, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing model processor properties in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            modelProcessorProperties (ModelProcessorPropertiesInput): Properties to be modified on the model processor properties.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModelProcessorProperties: A set of values related to the latest model processing state
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('modelProcessorProperties', 'ModelProcessorPropertiesInput!', modelProcessorProperties),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyModelProcessorProperties', parameterNameTypeValues=parameterNameTypeValues, returnType='ModelProcessorProperties', fields=fields, timeout=timeout)

    def ModifyPositionConfiguration(self, bodyId, environmentId, positionConfiguration, positionConfigurationId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing position configuration in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            positionConfiguration (PositionConfigurationInput): Properties to be modified on the position configuration.
            positionConfigurationId (str): ID of the position configuration to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            PositionConfiguration: A robot configuration defined via joint values.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('positionConfiguration', 'PositionConfigurationInput!', positionConfiguration),
            ('positionConfigurationId', 'String!', positionConfigurationId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyPositionConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='PositionConfiguration', fields=fields, timeout=timeout)

    def ModifyProgram(self, program, programId, commitOptions=None, fields=None, timeout=None):
        """Modify a program.

        Args:
            program (ProgramInput): Properties to be modified on the program.
            programId (str): ID of the program to modify.
            commitOptions (CommitOptionsInput, optional): Commit options.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Program: ITL program.
        """
        parameterNameTypeValues = [
            ('program', 'ProgramInput!', program),
            ('programId', 'String!', programId),
            ('commitOptions', 'CommitOptionsInput', commitOptions),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyProgram', parameterNameTypeValues=parameterNameTypeValues, returnType='Program', fields=fields, timeout=timeout)

    def ModifyProgramReference(self, programId, reference, referenceId, fields=None, timeout=None):
        """Modify a program reference.

        Args:
            programId (str): ID of the program.
            reference (ProgramReferenceInput): Properties to be applied on the program.
            referenceId (str): ID of the reference to be modified.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ProgramReference: A named reference pointing to a commit object.
        """
        parameterNameTypeValues = [
            ('programId', 'String!', programId),
            ('reference', 'ProgramReferenceInput!', reference),
            ('referenceId', 'String!', referenceId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyProgramReference', parameterNameTypeValues=parameterNameTypeValues, returnType='ProgramReference', fields=fields, timeout=timeout)

    def ModifyReferenceObjectPKs(self, bodyId, environmentId, addDisabledReferenceObjectPks=None, addReferenceObjectPks=None, removeDisabledReferenceObjectPks=None, removeReferenceObjectPks=None, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify reference object pks in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            addDisabledReferenceObjectPks ([String], optional): A list of reference object pks to add to the disable list.
            addReferenceObjectPks ([String], optional): A list of reference object pks to add.
            removeDisabledReferenceObjectPks ([String], optional): A list of reference object pks to remove from the disable list.
            removeReferenceObjectPks ([String], optional): A list of reference object pks to remove.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            ModifyReferenceObjectPKsReturnValue: 
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('addDisabledReferenceObjectPks', '[String!]', addDisabledReferenceObjectPks),
            ('addReferenceObjectPks', '[String!]', addReferenceObjectPks),
            ('removeDisabledReferenceObjectPks', '[String!]', removeDisabledReferenceObjectPks),
            ('removeReferenceObjectPks', '[String!]', removeReferenceObjectPks),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyReferenceObjectPKs', parameterNameTypeValues=parameterNameTypeValues, returnType='ModifyReferenceObjectPKsReturnValue', fields=fields, timeout=timeout)

    def ModifyRobotMotionParameters(self, bodyId, environmentId, robotMotionParameters, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing robot motion parameters in a body.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            robotMotionParameters (RobotMotionParametersInput): Properties to be modified on the robot motion parameters.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            RobotMotionParameters: A set of parameters that constrain the motion of a robot, e.g. maximum tool (cartesian) speed and acceleration.
                    Also includes information about the robot model and maker.
                    These parameters are used only during planning - the values in SafetySpeedConstraintsInfo are used to limit speed during execution.
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('robotMotionParameters', 'RobotMotionParametersInput!', robotMotionParameters),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyRobotMotionParameters', parameterNameTypeValues=parameterNameTypeValues, returnType='RobotMotionParameters', fields=fields, timeout=timeout)

    def ModifyRole(self, role, fields=None, timeout=None):
        """Modify an existing role.

        Args:
            role (RoleInput): Properties to be applied on the modified role.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Role: Each Group can have zero or more Role assigned.
                    A Role can be assigned to multiple Group.
        """
        parameterNameTypeValues = [
            ('role', 'RoleInput!', role),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Role', fields=fields, timeout=timeout)

    def ModifyTool(self, bodyId, environmentId, tool, toolId, resolveReferences=None, units=None, fields=None, timeout=None):
        """Modify an existing tool on a robot.

        Args:
            bodyId (str): ID of the body.
            environmentId (str): ID of the environment.
            tool (ToolInput): Proprties to modify on the tool.
            toolId (str): ID of the tool to modify.
            resolveReferences (bool, optional): Whether to operate on resolved bodies in the environment. Defaults to operate and return unresolved data.
            units (UnitSelectionInput, optional): Optional unit selection.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Tool: Tool describes a manipulator coordinate system of a robot. Other frameworks may use the term "TCP" or "tool tip".
        """
        parameterNameTypeValues = [
            ('bodyId', 'String!', bodyId),
            ('environmentId', 'String!', environmentId),
            ('tool', 'ToolInput!', tool),
            ('toolId', 'String!', toolId),
            ('resolveReferences', 'Boolean', resolveReferences),
            ('units', 'UnitSelectionInput', units),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyTool', parameterNameTypeValues=parameterNameTypeValues, returnType='Tool', fields=fields, timeout=timeout)

    def ModifyUser(self, user, fields=None, timeout=None):
        """Modify an existing user.

        Args:
            user (UserInput): Properties to be applied on the modified user.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            User: Represents one identity, such as “John Doe”.
        """
        parameterNameTypeValues = [
            ('user', 'UserInput!', user),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ModifyUser', parameterNameTypeValues=parameterNameTypeValues, returnType='User', fields=fields, timeout=timeout)

    def PurgeUnusedRuntimeImages(self, fields=None, timeout=None):
        """Purge unused runtime images

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='PurgeUnusedRuntimeImages', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def Reboot(self, fields=None, timeout=None):
        """Reboot controller.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='Reboot', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemoveDiskDriveFromDiskArray(self, diskArray, diskDrive, fields=None, timeout=None):
        """Remove a disk drive from a disk array.

        Args:
            diskArray (str): Array name, e.g. "/dev/md0".
            diskDrive (str): Drive name, e.g. "/dev/sda".
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('diskArray', 'String!', diskArray),
            ('diskDrive', 'String!', diskDrive),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemoveDiskDriveFromDiskArray', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemovePermissionFromRole(self, permission, roleId, fields=None, timeout=None):
        """Remove a permission from a group.

        Args:
            permission (PermissionInput): Permission properties.
            roleId (str): ID of the role to remove from.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('permission', 'PermissionInput!', permission),
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemovePermissionFromRole', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemoveRoleFromGroup(self, groupId, roleId, fields=None, timeout=None):
        """Remove a role from a group.

        Args:
            groupId (str): ID of the group to remove from.
            roleId (str): ID of the role to remove.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('groupId', 'String!', groupId),
            ('roleId', 'String!', roleId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemoveRoleFromGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemoveRuntimeImage(self, imageId, fields=None, timeout=None):
        """Remove an runtime image, if it is not in use.

        Args:
            imageId (str): ID of the runtime image to remove.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('imageId', 'String!', imageId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemoveRuntimeImage', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RemoveUserFromGroup(self, groupId, userId, fields=None, timeout=None):
        """Remove a user from a group.

        Args:
            groupId (str): ID of the group to remove from.
            userId (str): ID of the user to remove.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('groupId', 'String!', groupId),
            ('userId', 'String!', userId),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RemoveUserFromGroup', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RestartPlanningServer(self, fields=None, timeout=None):
        """Send command to restart planning server.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RestartPlanningServer', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def RestartRuntimeContainer(self, fields=None, timeout=None):
        """Restart current runtime container.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='RestartRuntimeContainer', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def ScanWirelessNetwork(self, fields=None, timeout=None):
        """Trigger scanning of wireless network. The scanned result will appear in hypervisor status.

        Args:
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='ScanWirelessNetwork', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)

    def SetUntypedApplicationConfiguration(self, applicationId, content, resolveReferences=None, fields=None, timeout=None):
        """Set application configuration without typing.

        Args:
            applicationId (str): ID of the application, for example "app-scene-editor".
            content (Any): Untyped content to replace the configuration with.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('applicationId', 'String!', applicationId),
            ('content', 'Any!', content),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetUntypedApplicationConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def SetUntypedConfiguration(self, configurationId, content, resolveReferences=None, fields=None, timeout=None):
        """Set a particular configuration without typing.

        Args:
            configurationId (str): ID of the configuration, for example "controllersystem.conf".
            content (Any): Untyped content to replace the configuration with.
            resolveReferences (bool, optional): Whether to operate on resolved configurations. Defaults to operate and return unresolved data.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Any: 
        """
        parameterNameTypeValues = [
            ('configurationId', 'String!', configurationId),
            ('content', 'Any!', content),
            ('resolveReferences', 'Boolean', resolveReferences),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SetUntypedConfiguration', parameterNameTypeValues=parameterNameTypeValues, returnType='Any', fields=fields, timeout=timeout)

    def SnapImages(self, parameters=None, fields=None, timeout=None):
        """Snap images using sensorbridges and return image metadata.

        Args:
            parameters (Any, optional): 
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            [MujinImage]: Holds data related to a captured images.
        """
        parameterNameTypeValues = [
            ('parameters', 'Any', parameters),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SnapImages', parameterNameTypeValues=parameterNameTypeValues, returnType='MujinImage', fields=fields, timeout=timeout)

    def SyncConfigurationsFromRemote(self, configurationIds, remoteUrl, ignoreDownloadFailures=None, remotePassword=None, remoteUsername=None, fields=None, timeout=None):
        """Sync configurations from remote webstack.

        Args:
            configurationIds ([String]): List of configuration IDs to download.
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            ignoreDownloadFailures (bool, optional): If set to true, ignores download failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncConfigurationsFromRemoteReturnValue: 
        """
        parameterNameTypeValues = [
            ('configurationIds', '[String!]!', configurationIds),
            ('remoteUrl', 'String!', remoteUrl),
            ('ignoreDownloadFailures', 'Boolean', ignoreDownloadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncConfigurationsFromRemote', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncConfigurationsFromRemoteReturnValue', fields=fields, timeout=timeout)

    def SyncConfigurationsToRemote(self, configurationIds, remoteUrl, ignoreUploadFailures=None, remotePassword=None, remoteUsername=None, fields=None, timeout=None):
        """Sync configurations to remote webstack.

        Args:
            configurationIds ([String]): List of configuration IDs to upload.
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            ignoreUploadFailures (bool, optional): If set to true, ignores download failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncConfigurationsToRemoteReturnValue: 
        """
        parameterNameTypeValues = [
            ('configurationIds', '[String!]!', configurationIds),
            ('remoteUrl', 'String!', remoteUrl),
            ('ignoreUploadFailures', 'Boolean', ignoreUploadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncConfigurationsToRemote', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncConfigurationsToRemoteReturnValue', fields=fields, timeout=timeout)

    def SyncEnvironments(self, remoteUrl, addKeywords=None, downloadReferenceObjects=None, dynamicEnvironments=None, environmentIds=None, fileNamePatterns=None, ignoreDownloadFailures=None, remotePassword=None, remoteUsername=None, fields=None, timeout=None):
        """Sync environments from remote webstack.


        Args:
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            addKeywords ([String], optional): If set, add keywords to the modified environments.
            downloadReferenceObjects (bool, optional): If set to true, download objects referenced in bodies.
            dynamicEnvironments ([EnvironmentInput], optional): List of dynamic environments to download extract referenced environment IDs from.
            environmentIds ([String], optional): List of environment IDs to download.
            fileNamePatterns ([String], optional): List of regular expression patterns to determine what files to sync inside each environment.
            ignoreDownloadFailures (bool, optional): If set to true, ignores download failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncEnvironmentsFromRemoteReturnValue: 
        """
        parameterNameTypeValues = [
            ('remoteUrl', 'String!', remoteUrl),
            ('addKeywords', '[String!]', addKeywords),
            ('downloadReferenceObjects', 'Boolean', downloadReferenceObjects),
            ('dynamicEnvironments', '[EnvironmentInput!]', dynamicEnvironments),
            ('environmentIds', '[String!]', environmentIds),
            ('fileNamePatterns', '[String!]', fileNamePatterns),
            ('ignoreDownloadFailures', 'Boolean', ignoreDownloadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncEnvironments', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncEnvironmentsFromRemoteReturnValue', fields=fields, timeout=timeout)

    def SyncEnvironmentsFromRemote(self, remoteUrl, addKeywords=None, downloadReferenceObjects=None, dynamicEnvironments=None, environmentIds=None, fileNamePatterns=None, ignoreDownloadFailures=None, remotePassword=None, remoteUsername=None, fields=None, timeout=None):
        """Sync environments from remote webstack.

        Args:
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            addKeywords ([String], optional): If set, add keywords to the modified environments.
            downloadReferenceObjects (bool, optional): If set to true, download objects referenced in bodies.
            dynamicEnvironments ([EnvironmentInput], optional): List of dynamic environments to download extract referenced environment IDs from.
            environmentIds ([String], optional): List of environment IDs to download.
            fileNamePatterns ([String], optional): List of regular expression patterns to determine what files to sync inside each environment.
            ignoreDownloadFailures (bool, optional): If set to true, ignores download failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncEnvironmentsFromRemoteReturnValue: 
        """
        parameterNameTypeValues = [
            ('remoteUrl', 'String!', remoteUrl),
            ('addKeywords', '[String!]', addKeywords),
            ('downloadReferenceObjects', 'Boolean', downloadReferenceObjects),
            ('dynamicEnvironments', '[EnvironmentInput!]', dynamicEnvironments),
            ('environmentIds', '[String!]', environmentIds),
            ('fileNamePatterns', '[String!]', fileNamePatterns),
            ('ignoreDownloadFailures', 'Boolean', ignoreDownloadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncEnvironmentsFromRemote', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncEnvironmentsFromRemoteReturnValue', fields=fields, timeout=timeout)

    def SyncEnvironmentsToRemote(self, remoteUrl, addKeywords=None, dynamicEnvironments=None, environmentIds=None, fileNamePatterns=None, ignoreUploadFailures=None, remotePassword=None, remoteUsername=None, uploadReferenceObjects=None, fields=None, timeout=None):
        """Sync environments to remote webstack.

        Args:
            remoteUrl (str): URL to remote webstack, e.g. "http://username:password@controller123".
            addKeywords ([String], optional): If set, add keywords to the modified environments.
            dynamicEnvironments ([EnvironmentInput], optional): List of dynamic environments to download extract referenced environment IDs from.
            environmentIds ([String], optional): List of environment IDs to upload.
            fileNamePatterns ([String], optional): List of regular expression patterns to determine what files to sync inside each environment.
            ignoreUploadFailures (bool, optional): If set to true, ignores upload failures.
            remotePassword (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            remoteUsername (str, optional): Optional credential to use when authenticating with remote webstack, if credentials are not given in remoteUrl already.
            uploadReferenceObjects (bool, optional): If set to true, upload objects referenced in bodies.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            SyncEnvironmentsToRemoteReturnValue: 
        """
        parameterNameTypeValues = [
            ('remoteUrl', 'String!', remoteUrl),
            ('addKeywords', '[String!]', addKeywords),
            ('dynamicEnvironments', '[EnvironmentInput!]', dynamicEnvironments),
            ('environmentIds', '[String!]', environmentIds),
            ('fileNamePatterns', '[String!]', fileNamePatterns),
            ('ignoreUploadFailures', 'Boolean', ignoreUploadFailures),
            ('remotePassword', 'String', remotePassword),
            ('remoteUsername', 'String', remoteUsername),
            ('uploadReferenceObjects', 'Boolean', uploadReferenceObjects),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='SyncEnvironmentsToRemote', parameterNameTypeValues=parameterNameTypeValues, returnType='SyncEnvironmentsToRemoteReturnValue', fields=fields, timeout=timeout)

    def Upgrade(self, autoRestartRuntimeContainer=None, purgeUnusedRuntimeImages=None, url=None, fields=None, timeout=None):
        """Upgrade controller with upgrade image.

        Args:
            autoRestartRuntimeContainer (bool, optional): Whether to auto restart runtime container after upgrade.
            purgeUnusedRuntimeImages (bool, optional): Whether to purge unused runtime images to make room for upgrade.
            url (str, optional): URL to download upgrade image from.
            fields (list or dict, optional): Specifies a subset of fields to return.
            timeout (float, optional): Number of seconds to wait for response.

        Returns:
            Void: 
        """
        parameterNameTypeValues = [
            ('autoRestartRuntimeContainer', 'Boolean', autoRestartRuntimeContainer),
            ('purgeUnusedRuntimeImages', 'Boolean', purgeUnusedRuntimeImages),
            ('url', 'String', url),
        ]
        return self._CallSimpleGraphAPI('mutation', operationName='Upgrade', parameterNameTypeValues=parameterNameTypeValues, returnType='Void', fields=fields, timeout=timeout)


class GraphClient(GraphClientBase, GraphQueries, GraphMutations):
    pass

#
# DO NOT EDIT, THIS FILE WAS AUTO-GENERATED, SEE HEADER
#

